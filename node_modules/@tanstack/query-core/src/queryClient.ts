// src/lib/queryClient.ts

// ... (अपरिवर्तित इम्पोर्ट और प्रारंभिक सेटअप)

export async function apiRequest<T>(
  method: 'GET' | 'POST' | 'PUT' | 'DELETE',
  path: string,
  data?: unknown
): Promise<T> {
  const baseUrl = import.meta.env.VITE_BACKEND_URL;
  if (!baseUrl) {
    throw new Error('VITE_BACKEND_URL पर्यावरण वैरिएबल में परिभाषित नहीं है।');
  }

  const url = `${baseUrl}${path}`;

  const headers: HeadersInit = {
    'Content-Type': 'application/json',
  };

  // ... (Firebase ID टोकन अधिग्रहण, अपरिवर्तित)

  const config: RequestInit = {
    method,
    headers,
  };

  if (data && (method === 'POST' || method === 'PUT')) {
    config.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, config);

    if (!response.ok) {
      let errorDetail = 'अज्ञात त्रुटि';
      // ✅ एरर हैंडलिंग के लिए यह महत्वपूर्ण बदलाव है
      try {
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          // यदि content-type JSON का सुझाव देता है तो JSON के रूप में पार्स करने का प्रयास करें
          const errorData = await response.json();
          errorDetail = errorData.message || errorData.error || JSON.stringify(errorData);
        } else {
          // अन्यथा, सादे टेक्स्ट के रूप में पढ़ें
          errorDetail = await response.text();
        }
      } catch (jsonOrTextError) {
        // यदि टेक्स्ट या JSON के रूप में भी पढ़ने में विफल रहता है, तो मूल त्रुटि को लॉग करें
        console.error("एरर प्रतिक्रिया (JSON या टेक्स्ट) को पार्स करने में विफल रहा:", jsonOrTextError);
        errorDetail = `प्रतिक्रिया पढ़ने में त्रुटि। स्थिति: ${response.status} ${response.statusText}`;
      }
      throw new Error(`API अनुरोध विफल: ${response.status} - ${errorDetail} पथ के लिए: ${path}`);
    }

    if (response.status === 204) {
      return null as T;
    }

    // ✅ सुनिश्चित करें कि सफल मामलों के लिए प्रतिक्रिया में JSON कंटेंट है
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return await response.json() as T;
    } else {
      // यदि 200 OK लेकिन JSON नहीं (उदाहरण के लिए, /sellers/me के लिए खाली प्रतिक्रिया)
      const responseText = await response.text();
      if (responseText.trim() === "") { // जांचें कि क्या यह वास्तव में खाली है
         // यदि इस पथ के लिए एक खाली प्रतिक्रिया अपेक्षित है तो null या एक खाली ऑब्जेक्ट लौटाएँ
         // /api/sellers/me के लिए, यदि कोई विक्रेता नहीं मिलता है तो null या {} स्वीकार्य हो सकता है
         console.warn(`खाली या गैर-JSON प्रतिक्रिया के साथ 200 OK प्राप्त हुआ ${path} के लिए। इसे null माना जा रहा है।`);
         return null as T; // विक्रेता न मिलने पर /api/sellers/me को क्या लौटाना चाहिए, उसके आधार पर समायोजित करें
      }
      throw new Error(`अपेक्षित JSON प्रतिक्रिया, लेकिन प्राप्त content type: ${contentType || 'कोई नहीं'} और पथ के लिए गैर-खाली टेक्स्ट: ${path}। प्रतिक्रिया: ${responseText}`);
    }

  } catch (error) {
    console.error(`API अनुरोध के दौरान त्रुटि ${url} पर:`, error);
    throw error;
  }
}
