// client/src/pages/CustomerOrdersPage.tsx
import { useEffect } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Link } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Package } from "lucide-react";
import { useSocket } from "@/hooks/useSocket"; // ‚úÖ socket.io client helper

// ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§ú‡•ã API ‡§∏‡•á ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
interface CustomerOrder {
  id: number;
  orderNumber: string;
  status: string; // ‚úÖ ‡§Ö‡§¨ ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§π‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•â‡§≤‡§Æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó
  total: string;
  createdAt: string;
}

// ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•à‡§ú ‡§ï‡§æ ‡§µ‡•á‡§∞‡§ø‡§è‡§Ç‡§ü (‡§∞‡§Ç‡§ó) ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
const statusBadgeVariants = {
  pending: "secondary",
  accepted: "info",
  preparing: "secondary",
  ready_for_pickup: "secondary",
  picked_up: "info",
  out_for_delivery: "info",
  delivered: "success",
  cancelled: "destructive",
  rejected: "destructive",
  default: "secondary",
};

const getStatusBadgeVariant = (status: string) => {
  return statusBadgeVariants[status as keyof typeof statusBadgeVariants] || statusBadgeVariants.default;
};

// ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
const getStatusText = (status: string) => {
  switch (status) {
    case "pending":
      return "‡§≤‡§Ç‡§¨‡§ø‡§§";
    case "accepted":
      return "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    case "preparing":
      return "‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à";
    case "ready_for_pickup":
      return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞";
    case "picked_up":
      return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "out_for_delivery":
      return "‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§π‡•à";
    case "delivered":
      return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "cancelled":
      return "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ";
    case "rejected":
      return "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    default:
      return "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
  }
};

// ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü‡•§
export default function CustomerOrdersPage() {
  const queryClient = useQueryClient();
  const socket = useSocket(); // üî• ‡§™‡§π‡§≤‡•á ‡§Ø‡§π‡•Ä‡§Ç declare ‡§ï‡§∞‡•ã

  // TanStack Query ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á API ‡§∏‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§´‡§º‡•á‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§
  const {
    data: orders,
    isLoading,
    isError,
    error,
  } = useQuery({
    queryKey: ["customerOrders"],
    queryFn: async () => {
      const response = await apiRequest("GET", "/api/orders");
      return response;
    },
  });

  // ‚úÖ Socket.IO ‡§∏‡•á order updates ‡§∏‡•Å‡§®‡•á‡§Ç
  useEffect(() => {
    const onOrderStatusUpdated = (updatedOrder: CustomerOrder) => {
      console.log("üì¶ Order update received:", updatedOrder);
      queryClient.invalidateQueries({ queryKey: ["customerOrders"] });
    };

    socket.on("order:status-updated", onOrderStatusUpdated);

    return () => {
      socket.off("order:status-updated", onOrderStatusUpdated);
    };
  }, [socket, queryClient]);

  // ‡§®‡•Ä‡§ö‡•á ‡§ï‡§æ ‡§¨‡§æ‡§ï‡•Ä JSX ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ
}

  // ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
  if (isLoading) {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-bold mb-6">‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞</h1>
        <div className="space-y-4">
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className="h-24 w-full rounded-lg" />
          ))}
        </div>
      </div>
    );
  }

  // ‡§è‡§∞‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
  if (isError) {
    return (
      <div className="container mx-auto p-4 text-center">
        <p className="text-red-500">
          ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {(error as Error).message}
        </p>
        <Button onClick={() => window.location.reload()} className="mt-4">
          ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
        </Button>
      </div>
    );
  }

  // ‚úÖ ‡§ñ‡§æ‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
  if (!orders || orders.length === 0) {
    return (
      <div className="container mx-auto p-4 text-center">
        <Package className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h2 className="text-xl font-semibold mb-2">‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</h2>
        <p className="text-gray-600">
          ‡§Ü‡§™‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§≠‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!
        </p>
        <Button asChild className="mt-4">
          <Link to="/">‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç</Link>
        </Button>
      </div>
    );
  }

  // ‡§ë‡§∞‡•ç‡§°‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏</h1>
      <div className="space-y-4">
        {orders.map((order: CustomerOrder) => (
          <Card key={order.id} className="p-4">
            <CardHeader className="p-0 mb-4">
              <CardTitle className="flex justify-between items-center text-lg">
                <span>‡§ë‡§∞‡•ç‡§°‡§∞ #{order.orderNumber}</span>
                <Badge variant={getStatusBadgeVariant(order.status)}>
                  {getStatusText(order.status)}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground">
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§§‡§æ‡§∞‡•Ä‡§ñ:</span>{" "}
                    {new Date(order.createdAt).toLocaleDateString()}
                  </p>
                </div>
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§ï‡•Å‡§≤:</span> ‚Çπ
                    {Number(order.total).toLocaleString()}
                  </p>
                </div>
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§∏‡•ç‡§•‡§ø‡§§‡§ø:</span>{" "}
                    {getStatusText(order.status)}
                  </p>
                </div>
              </div>
              <div className="mt-4">
                <Button asChild>
                  <Link to={`/order-confirmation/${order.id}`}>
                    ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
  

 
