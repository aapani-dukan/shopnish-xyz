import { useEffect, useState, createContext, useContext } from "react";
import { io, type Socket } from "socket.io-client";
import { useAuth } from "./useAuth";

const SocketContext = createContext<Socket | null>(null);

export const SocketProvider = ({ children }: { children: React.ReactNode }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const { user, isAuthenticated } = useAuth(); 

  useEffect(() => {
    // ‚úÖ ‡§∏‡•â‡§ï‡•á‡§ü ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§Æ‡§æ‡§£‡§ø‡§§ (authenticated) ‡§π‡•ã ‡§î‡§∞ user ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•ã‡•§
    if (isAuthenticated && user) {
      const socketUrl = import.meta.env.VITE_API_BASE_URL || "http://localhost:5001";
      const newSocket = io(socketUrl, {
        withCredentials: true,
      });

      setSocket(newSocket);

      // ‡§ú‡§¨ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è ‡§§‡•ã client ‡§ï‡•ã ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§ï‡§∞‡•á‡§Ç
      newSocket.on("connect", () => {
        console.log("‚úÖ Socket connected:", newSocket.id);
        
        // ‡§∏‡•Ä‡§ß‡•á emit ‡§ï‡§∞‡•á‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø user ‡§Ö‡§¨ null ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ
        newSocket.emit("register-client", {
          role: user.role,
          userId: user.id,
        });
        console.log("üì° Registered client:", { role: user.role, userId: user.id });
      });

      // ‚úÖ cleanup function ‡§ú‡•ã ‡§∏‡•â‡§ï‡•á‡§ü ‡§ï‡•ã ‡§°‡§ø‡§∏‡•ç‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ
      return () => {
        newSocket.disconnect();
        console.log("‚ö° Socket disconnected");
      };
    } else if (socket) {
      // ‚úÖ ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§§‡•ã ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§∏‡•â‡§ï‡•á‡§ü ‡§ï‡•ã ‡§°‡§ø‡§∏‡•ç‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
      socket.disconnect();
      setSocket(null);
    }
    // ‚úÖ Dependencies: ‡§ï‡•á‡§µ‡§≤ isAuthenticated ‡§î‡§∞ user ‡§™‡§∞ ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞
  }, [isAuthenticated, user]); 

  return (
    <SocketContext.Provider value={socket}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocket = () => {
  const socket = useContext(SocketContext);
  if (!socket) {
    throw new Error("useSocket must be used within a SocketProvider");
  }
  return socket;
};
