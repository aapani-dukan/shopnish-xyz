// client/src/hooks/useAuth.tsx

import { useEffect, useState, createContext, useContext, useCallback } from "react";
import { User as FirebaseUser } from "firebase/auth";
import { 
  auth, // рдЖрдкрдХреЛ рдЗрд╕ auth рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реИ рдпрджрд┐ рдЖрдк onAuthStateChanged рд╕реАрдзреЗ рдЖрдпрд╛рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ
  app,
  onAuthStateChanged, // тЬЕ onAuthStateChange рд╕реЗ onAuthStateChanged рдореЗрдВ рдмрджрд▓рд╛
  handleRedirectResult as firebaseHandleRedirectResult,
  signInWithGoogle as firebaseSignInWithGoogle,
  signOutUser,
  AuthError,
  AuthResult // AuthResult рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛
} from "@/lib/firebase";
import { apiRequest } from "@/lib/queryClient"; 
import { queryClient } from '@/lib/queryClient'; // тЬЕ queryClient рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

// --- рдЖрдкрдХреЗ рдкреНрд░рдХрд╛рд░реЛрдВ рдХреЛ рдареАрдХ рдХрд░реЗрдВ ---
// рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпреЗ рдЖрдкрдХреЗ types/index.ts рд╕реЗ рдореЗрд▓ рдЦрд╛рддреЗ рд╣реИрдВ рдпрд╛ рдпрд╣рд╛рдБ рд╕рд╣реА рд╣реИрдВ
interface SellerInfo { // рдпрд╣ рдЕрдм SellerProfile рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП, рдЬреИрд╕рд╛ рдХрд┐ рдкрд╣рд▓реЗ рдЪрд░реНрдЪрд╛ рдХреА рдЧрдИ рдереА
  id: string; // рд╡рд┐рдХреНрд░реЗрддрд╛ рдХреА ID
  userId: string; // Firebase UID рд╕реЗ рдЬреБрдбрд╝рд╛ рдпреВрдЬрд░ ID
  businessName: string;
  approvalStatus: "pending" | "approved" | "rejected";
  rejectionReason?: string | null;
  // рдЕрдиреНрдп seller fields рдпрд╣рд╛рдБ рдЬреЛрдбрд╝реЗрдВ
  [key: string]: any; // рдХрд┐рд╕реА рднреА рдЕрддрд┐рд░рд┐рдХреНрдд рдлреАрд▓реНрдб рдХреЗ рд▓рд┐рдП
}

interface User {
  uid: string; // Firebase UID
  email: string | null;
  name: string | null;
  role: "customer" | "seller" | "admin" | "delivery"; // рднреВрдорд┐рдХрд╛ рдХреНрд░рдордмрджреНрдз рдХрд░реЗрдВ
  // тЬЕ seller рдХреЗ рдмрдЬрд╛рдп sellerProfile рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдпрд╣ рдЖрдкрдХреА рдЕрдкреЗрдХреНрд╖рд╛рдУрдВ рд╕реЗ рдореЗрд▓ рдЦрд╛рддрд╛ рд╣реИ
  sellerProfile?: SellerInfo | null; // рдпрд╣ рд╡реИрдХрд▓реНрдкрд┐рдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ
  idToken: string;
  // рдпрджрд┐ рдЖрдкрдХреЗ DB рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдореЗрдВ рдпреЗ рд╣реИрдВ рддреЛ рдЗрдиреНрд╣реЗрдВ рдпрд╣рд╛рдБ рдЬреЛрдбрд╝реЗрдВ
  id?: string; // DB рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID
  approvalStatus?: "pending" | "approved" | "rejected"; // DB рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЕрдиреБрдореЛрджрди рд╕реНрдерд┐рддрд┐
}

interface AuthContextType {
  user: User | null;
  isLoadingAuth: boolean;
  isAuthenticated: boolean;
  error: AuthError | null;
  clearError: () => void;
  signIn: (usePopup?: boolean) => Promise<FirebaseUser | null>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoadingAuth, setIsLoadingAuth] = useState(true);
  const [error, setError] = useState<AuthError | null>(null);

  // processAndSetUser рдЕрдм DB рд╕реЗ рднреА рднреВрдорд┐рдХрд╛ рдФрд░ approvalStatus рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдЧрд╛
  const processAndSetUser = useCallback(async (firebaseUser: FirebaseUser | null) => {
    if (!firebaseUser) {
      setUser(null);
      setError(null);
      setIsLoadingAuth(false);
      // Firebase рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реЛрдиреЗ рдкрд░ рд╕рднреА рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдХреНрд╡реЗрд░реАрдЬрд╝ рдХреЛ рд╣рдЯрд╛ рджреЗрдВ
      queryClient.removeQueries({ queryKey: ["userProfile", firebaseUser?.uid] });
      queryClient.removeQueries({ queryKey: ["sellerProfile", firebaseUser?.uid] });
      queryClient.removeQueries({ queryKey: ["/api/users/me"] });
      queryClient.removeQueries({ queryKey: ["/api/sellers/me"] });
      return;
    }

    try {
      const idToken = await firebaseUser.getIdToken();
      // рдХрд╕реНрдЯрдо рдХреНрд▓реЗрдо рд╕реЗ рднреВрдорд┐рдХрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (Firebase JWT рдореЗрдВ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛)
      const decodedToken = await firebaseUser.getIdTokenResult();
      // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рднреВрдорд┐рдХрд╛ рдПрдХ рд╡реИрдз UserRole рд╣реИ
      const firebaseRole: User['role'] = (decodedToken.claims.role as User['role']) || "customer";

      const email = firebaseUser.email;
      const name = firebaseUser.displayName;

      // 1. рдЕрдкрдиреЗ DB рд╕реЗ рдореБрдЦреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдбреЗрдЯрд╛ (рдЬрд┐рд╕рдореЗрдВ DB рд░реЛрд▓ рдФрд░ approvalStatus рд╣реИ) рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
      let dbUserData: User | null = null;
      try {
        const res = await apiRequest("GET", `/api/users/me?firebaseUid=${firebaseUser.uid}`);
        const data = await res.json();
        dbUserData = data.user; // рдорд╛рди рд▓реЗрдВ рдХрд┐ рдЖрдкрдХрд╛ /api/users/me { user: UserObject } рд▓реМрдЯрд╛рддрд╛ рд╣реИ
      } catch (apiError: any) {
        console.warn("DB User info fetch failed, using Firebase data:", apiError.message || apiError);
        // рдпрджрд┐ DB user fetch рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ, рддреЛ Firebase data рдХреЗ рд╕рд╛рде рдЖрдЧреЗ рдмрдврд╝реЗрдВ
        // рдЖрдк рдпрд╣рд╛рдБ рдПрдХ рдПрд░рд░ рд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдпрджрд┐ DB data рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ
        setError({ code: "db/user-fetch-failed", message: "Failed to fetch full user info from database." });
      }

      // 2. рд╡рд┐рдХреНрд░реЗрддрд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдбреЗрдЯрд╛ рдлрд╝реЗрдЪ рдХрд░реЗрдВ (рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ)
      let sellerProfileData: SellerInfo | null = null;
      // рдХреЗрд╡рд▓ рддрднреА рдлрд╝реЗрдЪ рдХрд░реЗрдВ рдЬрдм Firebase рднреВрдорд┐рдХрд╛ 'seller' рд╣реЛ рдпрд╛ DB рднреВрдорд┐рдХрд╛ 'seller' рд╣реЛ
      if (firebaseRole === "seller" || dbUserData?.role === "seller") {
        try {
          // /api/sellers/me рдЕрдм 404 рдкрд░ рдПрд░рд░ рдлреЗрдВрдХрддрд╛ рд╣реИ рдпрджрд┐ рдХреЛрдИ рд╡рд┐рдХреНрд░реЗрддрд╛ рдирд╣реАрдВ рд╣реИ
          const res = await apiRequest("GET", "/api/sellers/me", undefined); // idToken рдХреА рдЕрдм рдпрд╣рд╛рдБ рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реИ, apiRequest рдЙрд╕реЗ рдЕрдВрджрд░ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ
          sellerProfileData = await res.json() as SellerInfo;
          console.log("Seller info fetched:", sellerProfileData);
        } catch (apiError: any) {
          if (apiError.message && apiError.message.includes('404')) {
            console.log("Seller profile not found for user (404).");
            sellerProfileData = null; // рдпрджрд┐ 404 рд╣реИ, рддреЛ рдХреЛрдИ рд╡рд┐рдХреНрд░реЗрддрд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рд╣реИ
          } else {
            console.warn("Seller profile fetch failed:", apiError.message || apiError);
            // рдЧрдВрднреАрд░ рдПрд░рд░ рдХреЗ рд▓рд┐рдП рдПрд░рд░ рд╕реЗрдЯ рдХрд░реЗрдВ
            setError({ code: "seller/profile-fetch-failed", message: "Failed to fetch seller profile." });
          }
        }
      }

      // рдЕрдВрддрд┐рдо рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рдмрдирд╛рдПрдВ
      const finalRole: User['role'] = dbUserData?.role || firebaseRole; // DB рднреВрдорд┐рдХрд╛ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдВ
      const finalApprovalStatus = dbUserData?.approvalStatus || sellerProfileData?.approvalStatus || undefined; // DB approvalStatus рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдВ

      const currentUser: User = {
        uid: firebaseUser.uid,
        id: dbUserData?.id, // DB user ID
        email: email || dbUserData?.email,
        name: name || dbUserData?.name,
        role: finalRole,
        idToken: idToken,
        // тЬЕ sellerProfile рдпрд╣рд╛рдБ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ
        sellerProfile: sellerProfileData, 
        // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ 'approvalStatus' рд╕реАрдзреЗ 'user' рдСрдмреНрдЬреЗрдХреНрдЯ рдореЗрдВ рднреА рд╣реЛ
        // рдпрд╣ рдЙрди рдХрдВрдкреЛрдиреЗрдВрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧреА рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рдЬреЛ рд╕реАрдзреЗ 'user.approvalStatus' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ
        approvalStatus: finalApprovalStatus, 
      };

      setUser(currentUser);
      setIsLoadingAuth(false);
      setError(null);
      console.log("User processed and set:", currentUser.uid, "Role:", currentUser.role, "Approval Status:", currentUser.approvalStatus);

    } catch (err: any) {
      console.error("Auth processing error:", err);
      setUser(null);
      setIsLoadingAuth(false);
      setError({ code: err.code || "auth/processing-error", message: err.message || "Failed to process user data." });
    }
  }, []);

  // рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо рдХреЗ рд▓рд┐рдП useEffect
  useEffect(() => {
    const checkRedirect = async () => {
      // рдпрджрд┐ authState рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд▓реЛрдбрд┐рдВрдЧ рдирд╣реАрдВ рд╣реИ рдпрд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реЗрдЯ рд╣реИ, рддреЛ рдЕрдирд╛рд╡рд╢реНрдпрдХ рд░реВрдк рд╕реЗ рдлрд┐рд░ рд╕реЗ рдЬрд╛рдБрдЪ рди рдХрд░реЗрдВ
      if (!isLoadingAuth && user) return; 

      console.log("ЁЯФД Checking for redirect result...");
      const { user: fbUser, error: redirectError } = await firebaseHandleRedirectResult();
      
      if (fbUser) {
        console.log("тЬЕ Redirect result user found:", fbUser.uid);
        await processAndSetUser(fbUser);
      } else if (redirectError) {
        console.log("тЭМ Redirect error found:", redirectError);
        setError(redirectError);
        setIsLoadingAuth(false);
      } else {
        console.log("тД╣я╕П No redirect result user or error. Waiting for onAuthStateChanged.");
      }
    };
    checkRedirect();
  }, [isLoadingAuth, user, processAndSetUser]); // тЬЕ рдирд┐рд░реНрднрд░рддрд╛рдПрдБ рдЕрдкрдбреЗрдЯ рдХреА рдЧрдИрдВ

  // onAuthStateChanged listener
  useEffect(() => {
    console.log("ЁЯФД Setting up onAuthStateChanged listener.");
    const unsubscribe = onAuthStateChanged(auth, async (fbUser) => { // тЬЕ onAuthStateChange рдХреЛ onAuthStateChanged рдореЗрдВ рдмрджрд▓ рджрд┐рдпрд╛ рдЧрдпрд╛
      console.log("ЁЯФД onAuthStateChanged listener fired. fbUser:", fbUser?.uid || "null");
      // рдХреЗрд╡рд▓ рддрднреА processAndSetUser рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ рдпрджрд┐ user state рдЕрднреА рднреА null рд╣реИ
      // рдпрд╛ рдпрджрд┐ fbUser рдмрджрд▓ рдЧрдпрд╛ рд╣реИ (рддрд╛рдХрд┐ рдЕрдирд╛рд╡рд╢реНрдпрдХ рдЕрдкрдбреЗрдЯ рд╕реЗ рдмрдЪрд╛ рдЬрд╛ рд╕рдХреЗ)
      if (!user || (fbUser && fbUser.uid !== user.uid) || (!fbUser && user)) {
        await processAndSetUser(fbUser);
      } else {
        setIsLoadingAuth(false); // рдпрджрд┐ рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ рд╣реИ, рддреЛ рд▓реЛрдбрд┐рдВрдЧ рдЦрддреНрдо рдХрд░реЗрдВ
      }
    });

    return () => {
      console.log("Auth Provider: Cleaning up onAuthStateChanged listener.");
      unsubscribe();
    };
  }, [user, processAndSetUser]); // тЬЕ user рдХреЛ рдирд┐рд░реНрднрд░рддрд╛ рдореЗрдВ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛

  const signIn = useCallback(async (usePopup: boolean = false): Promise<FirebaseUser | null> => {
    setIsLoadingAuth(true);
    setError(null);
    try {
      const fbUser = await firebaseSignInWithGoogle(usePopup);
      // processAndSetUser рдХреЛ рдкрд╣рд▓реЗ рд╣реА onAuthStateChanged рджреНрд╡рд╛рд░рд╛ рд╣реИрдВрдбрд▓ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛
      // рддреЛ рдпрд╣рд╛рдБ рд╕реАрдзреЗ fbUser рд▓реМрдЯрд╛ рджреЗрдВ
      return fbUser; 
    } catch (err: any) {
      console.error("Auth Provider: Error during signIn:", err);
      setError(err as AuthError);
      setUser(null);
      setIsLoadingAuth(false);
      throw err;
    }
  }, []); // тЬЕ рдирд┐рд░реНрднрд░рддрд╛рдПрдБ рд╣рдЯрд╛рдИ рдЧрдИрдВ рдХреНрдпреЛрдВрдХрд┐ processAndSetUser рдЕрдм onAuthStateChanged рдореЗрдВ рд╣реИ

  const signOut = useCallback(async () => {
    try {
      console.log("Auth Provider: Attempting to sign out...");
      await signOutUser();
      // setUser(null) рдФрд░ setIsLoadingAuth(false) рдХреЛ processAndSetUser рджреНрд╡рд╛рд░рд╛ рд╣реИрдВрдбрд▓ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛
      // рдЬрдм onAuthStateChanged null fbUser рдХреЗ рд╕рд╛рде рдлрд╛рдпрд░ рдХрд░реЗрдЧрд╛
      setError(null);
      console.log("тЬЕ Signed out successfully. State reset.");
      // рд▓реЙрдЧрдЖрдЙрдЯ рдкрд░ рд╕рднреА рдХреНрд╡реЗрд░реА рдХреИрд╢ рдХреЛ рд╕рд╛рдл рдХрд░реЗрдВ
      queryClient.clear();
    } catch (err: any) {
      console.error("тЭМ Error during sign out:", err);
      setError(err as AuthError);
      throw err;
    }
  }, []); // тЬЕ рдирд┐рд░реНрднрд░рддрд╛рдПрдБ рд╣рдЯрд╛рдИ рдЧрдИрдВ

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const authContextValue = {
    user,
    isLoadingAuth,
    isAuthenticated: !!user,
    error,
    clearError,
    signIn,
    signOut,
  };

  return (
    <AuthContext.Provider value={authContextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used within an AuthProvider");
  return ctx;
};
