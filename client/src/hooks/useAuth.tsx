// client/src/hooks/useAuth.tsx

import { useEffect, useState, createContext, useContext, useCallback } from "react";
import { User as FirebaseUser } from "firebase/auth"; // FirebaseUser рдХреЛ рд╕реАрдзрд╛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
import { 
  auth, // Firebase Auth instance
  app, // Firebase app instance
  onAuthStateChange, // Replit рд╡рд╛рд▓рд╛ onAuthStateChange рд▓рд┐рд╕рдирд░
  handleRedirectResult as firebaseHandleRedirectResult, // Replit рд╡рд╛рд▓рд╛ handleRedirectResult
  signInWithGoogle as firebaseSignInWithGoogle, // Replit рд╡рд╛рд▓рд╛ signInWithGoogle (popup/redirect)
  signOutUser, // Replit рд╡рд╛рд▓рд╛ signOutUser
  AuthError, // Replit рд╕реЗ AuthError рдЯрд╛рдЗрдк
  AuthResult // Replit рд╕реЗ AuthResult рдЯрд╛рдЗрдк
} from "@/lib/firebase"; // тЬЕ рдЕрдм firebase.ts рд╕реЗ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдлрд╝рдВрдХреНрд╢рди рдФрд░ рдЯрд╛рдЗрдкреНрд╕ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

// рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ QueryClient рд╕реЗ apiRequest рд╣реИ, рддреЛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рд╕рд╣реА рдврдВрдЧ рд╕реЗ рдЗрдореНрдкреЛрд░реНрдЯ рд╣реЛ
// рдпрджрд┐ apiRequest 'Authorization' рд╣реЗрдбрд░ рдореЗрдВ 'idToken' рд▓реЗрддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрдЧреАред
// рдорд╛рди рд▓реЗрддреЗ рд╣реИрдВ рдХрд┐ apiRequest рдХреЛ рдЕрдм рд╕реАрдзреЗ idToken рдкрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ рдЬреИрд╕рд╛ рдХрд┐ рдЖрдкрдХреЗ рдкреБрд░рд╛рдиреЗ рдХреЛрдб рдореЗрдВ рдерд╛ред
import { apiRequest } from "@/lib/queryClient"; 

interface SellerInfo {
  approvalStatus: "pending" | "approved" | "rejected";
  rejectionReason?: string | null;
}

interface User {
  uid: string; // Firebase UID
  email: string | null;
  name: string | null;
  role: "seller" | "admin" | "delivery" | "customer";
  seller?: SellerInfo;
  idToken: string; // Firebase ID Token
  // firebaseUid: string; // uid рд╣реА Firebase UID рд╣реИ, duplicate рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ
}

interface AuthContextType {
  user: User | null;
  isLoadingAuth: boolean;
  isAuthenticated: boolean;
  error: AuthError | null; // тЬЕ рдПрд░рд░ рд╕реНрдЯреЗрдЯ рдЬреЛрдбрд╝реЗрдВ
  clearError: () => void; // тЬЕ рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
  signIn: (usePopup?: boolean) => Promise<FirebaseUser | null>; // тЬЕ signIn рдлрд╝рдВрдХреНрд╢рди рдЬреЛрдбрд╝реЗрдВ
  signOut: () => Promise<void>; // тЬЕ signOut рдЕрдм Promise<void> рд░рд┐рдЯрд░реНрди рдХрд░реЗрдЧрд╛
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoadingAuth, setIsLoadingAuth] = useState(true);
  const [error, setError] = useState<AuthError | null>(null); // тЬЕ рдПрд░рд░ рд╕реНрдЯреЗрдЯ

  // Function to process the Firebase user object and fetch custom claims/roles
  const processAndSetUser = useCallback(async (firebaseUser: FirebaseUser | null) => {
    if (!firebaseUser) {
      setUser(null);
      setError(null); // рдпрджрд┐ рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИ рддреЛ рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░реЗрдВ
      setIsLoadingAuth(false);
      return;
    }

    try {
      const idToken = await firebaseUser.getIdToken();
      const decodedToken = await firebaseUser.getIdTokenResult();

      const role = decodedToken.claims.role || "customer";
      const email = firebaseUser.email;
      const name = firebaseUser.displayName;

      let seller: SellerInfo | undefined = undefined;
      if (role === "seller") {
        try {
          // Backend рд╕реЗ seller info fetch рдХрд░реЗрдВ
          // apiRequest рдореЗрдВ idToken рдХреЛ Authorization Header рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░реЗрдВ
          const res = await apiRequest("GET", "/api/sellers/me", undefined, idToken);
          const responseData = await res.json(); // Response рдХреЛ JSON рдореЗрдВ рдкрд╛рд░реНрд╕ рдХрд░реЗрдВ
          seller = responseData as SellerInfo; // рдЗрд╕реЗ SellerInfo рдХреЗ рд░реВрдк рдореЗрдВ рдХрд╛рд╕реНрдЯ рдХрд░реЗрдВ
          console.log("Seller info fetched:", seller);
        } catch (apiError) {
          console.warn("Seller info fetch failed:", apiError);
          // рдпрджрд┐ API рдХреЙрд▓ рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ, рддреЛ рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕реЗрдЯ рдХрд░реЗрдВ рд▓реЗрдХрд┐рди рд╡рд┐рдХреНрд░реЗрддрд╛ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдмрд┐рдирд╛
          setError({ code: "seller/info-fetch-failed", message: "Failed to fetch seller info." });
        }
      }

      setUser({ uid: firebaseUser.uid, email, name, role, seller, idToken });
      setIsLoadingAuth(false);
      setError(null); // рд╕рдХреНрд╕реЗрд╕рдлреБрд▓ рд▓реЙрдЧрд┐рди рдкрд░ рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░реЗрдВ
      console.log("User processed and set:", firebaseUser.uid, "Role:", role);

    } catch (err: any) {
      console.error("Auth processing error:", err);
      setUser(null);
      setIsLoadingAuth(false);
      setError({ code: err.code || "auth/processing-error", message: err.message || "Failed to process user data." });
    }
  }, []); // useCallback dependencies


  // useEffect 1: Handle Google Redirect Result (on page load after redirect)
  useEffect(() => {
    console.log("ЁЯФД Checking for redirect result...");
    const checkRedirect = async () => {
      // тЬЕ Replit рдХреЗ handleRedirectResult рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      const { user: fbUser, error: redirectError } = await firebaseHandleRedirectResult();
      
      if (fbUser) {
        console.log("тЬЕ Redirect result user found:", fbUser.uid);
        await processAndSetUser(fbUser);
      } else if (redirectError) {
        console.log("тЭМ Redirect error found:", redirectError);
        setError(redirectError);
        setIsLoadingAuth(false); // рддреНрд░реБрдЯрд┐ рдкрд░ рднреА рд▓реЛрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ
      } else {
        console.log("тД╣я╕П No redirect result user or error.");
        // рдпрджрд┐ рдХреЛрдИ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рд╣реИ, рддреЛ onAuthStateChanged рдХреЛ рдЕрдкрдиреА рдмрд╛рд░реА рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░рдиреЗ рджреЗрдВред
        // setIsLoadingAuth рдХреЛ рдпрд╣рд╛рдВ false рдирд╣реАрдВ рдХрд░реЗрдВрдЧреЗ, onAuthStateChanged рд╕рдВрднрд╛рд▓реЗрдЧрд╛ред
      }
    };

    // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рдпрд╣ рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ рдЪрд▓реЗ рдФрд░ onAuthStateChanged рд╕реЗ рдкрд╣рд▓реЗ
    // рд╣рдо рдПрдХ рдЫреЛрдЯреЗ рд╕реЗ рдЯрд╛рдЗрдорд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ `sessionStorage` рдореЗрдВ рдПрдХ рдлрд╝реНрд▓реИрдЧ рд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
    // рд╕рд░рд▓рддрдо рдорд╛рдорд▓реЗ рдХреЗ рд▓рд┐рдП, рдЗрд╕реЗ рд╕реАрдзреЗ рдЪрд▓рд╛рдПрдБред
    checkRedirect();
  }, [processAndSetUser]);


  // useEffect 2: Set up the onAuthStateChanged listener
  useEffect(() => {
    console.log("ЁЯФД Setting up onAuthStateChanged listener.");
    // тЬЕ Replit рдХреЗ onAuthStateChange рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    const unsubscribe = onAuthStateChange(async (fbUser) => {
      console.log("ЁЯФД onAuthStateChanged listener fired. fbUser:", fbUser?.uid || "null");
      // isLoadingAuth рдХреЛ рдпрд╣рд╛рдБ `true` рд╕реЗрдЯ рдХрд░реЗрдВ рдпрджрд┐ рдпрд╣ рдкрд╣рд▓реА рдмрд╛рд░ рдЯреНрд░рд┐рдЧрд░ рд╣реЛ рд░рд╣рд╛ рд╣реИ рдФрд░ рд╣рдо рдЕрднреА рднреА рд▓реЛрдб рдХрд░ рд░рд╣реЗ рд╣реИрдВред
      // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ UI рдХреЛ 'рд▓реЛрдбрд┐рдВрдЧ' рд╕реНрдерд┐рддрд┐ рдкрддрд╛ рдЪрд▓реЗред
      if (isLoadingAuth && !fbUser && user === null) {
          // рдпрджрд┐ рдкрд╣рд▓реА рдмрд╛рд░ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ рдФрд░ рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИ, рддреЛ рдпрд╣ рдЕрдВрддрд┐рдо рд╕реНрдерд┐рддрд┐ рд╣реИ
          setIsLoadingAuth(false);
      }
      await processAndSetUser(fbUser); // Firebase рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ
    });

    return () => {
      console.log("Auth Provider: Cleaning up onAuthStateChanged listener.");
      unsubscribe();
    };
  }, [processAndSetUser, isLoadingAuth, user]); // dependencies рдореЗрдВ user рдФрд░ isLoadingAuth рдЬреЛрдбрд╝реЗрдВ


  // тЬЕ Google рдХреЗ рд╕рд╛рде рд╕рд╛рдЗрди-рдЗрди (рдкреЙрдкрдЕрдк/рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ)
  const signIn = useCallback(async (usePopup: boolean = false): Promise<FirebaseUser | null> => {
    setIsLoadingAuth(true);
    setError(null); // рдирдП рд╕рд╛рдЗрди-рдЗрди рдкреНрд░рдпрд╛рд╕ рд╕реЗ рдкрд╣рд▓реЗ рдХреЛрдИ рднреА рдкреБрд░рд╛рдиреА рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░реЗрдВ
    try {
      // тЬЕ Replit рдХреЗ signInWithGoogle рдлрд╝рдВрдХреНрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      const fbUser = await firebaseSignInWithGoogle(usePopup);
      if (fbUser) {
        await processAndSetUser(fbUser); // рдпрджрд┐ рдкреЙрдкрдЕрдк рд╕рдлрд▓ рд╣реЛрддрд╛ рд╣реИ, рддреЛ рддреБрд░рдВрдд рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ
      }
      // рдпрджрд┐ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд╣реЛрддрд╛ рд╣реИ, рддреЛ рдлрд╝рдВрдХреНрд╢рди null рд▓реМрдЯрд╛рдПрдЧрд╛, рдФрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдкрд░рд┐рдгрд╛рдо useEffect рдЗрд╕реЗ рд╕рдВрднрд╛рд▓реЗрдЧрд╛
      return fbUser; 
    } catch (err: any) {
      console.error("Auth Provider: Error during signIn:", err);
      // firebaseSignInWithGoogle рдкрд╣рд▓реЗ рд╕реЗ рд╣реА AuthError рдХреЗ рд░реВрдк рдореЗрдВ рдПрд░рд░ рдлреЗрдВрдХ рд░рд╣рд╛ рд╣реИред
      setError(err as AuthError);
      setUser(null);
      setIsLoadingAuth(false);
      throw err; // рдПрд░рд░ рдХреЛ рдХреЙрд▓рд┐рдВрдЧ рдХрдВрдкреЛрдиреЗрдВрдЯ рддрдХ рдкрд╣реБрдВрдЪрд╛рдПрдВ
    }
  }, [processAndSetUser]);


  // тЬЕ рд▓реЙрдЧ-рдЖрдЙрдЯ рдлрд╝рдВрдХреНрд╢рди
  const signOut = useCallback(async () => {
    try {
      console.log("Auth Provider: Attempting to sign out...");
      await signOutUser(); // тЬЕ Replit рдХреЗ signOutUser рдлрд╝рдВрдХреНрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      setUser(null);
      // setIsAuthenticated(false); // isAuthenticated computed property рд╣реИ
      setIsLoadingAuth(false); // рд╕рд╛рдЗрди рдЖрдЙрдЯ рдХреЗ рдмрд╛рдж рд▓реЛрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрдд
      setError(null); // рд╕рд╛рдЗрди рдЖрдЙрдЯ рдкрд░ рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░реЗрдВ
      console.log("тЬЕ Signed out successfully. State reset.");
    } catch (err: any) {
      console.error("тЭМ Error during sign out:", err);
      setError(err as AuthError);
      throw err; // рдПрд░рд░ рдХреЛ рдХреЙрд▓рд┐рдВрдЧ рдХрдВрдкреЛрдиреЗрдВрдЯ рддрдХ рдкрд╣реБрдВрдЪрд╛рдПрдВ
    }
  }, []);

  // тЬЕ рдПрд░рд░ рдХреНрд▓рд┐рдпрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const authContextValue = {
    user,
    isLoadingAuth,
    isAuthenticated: !!user, // рдпрд╣ рдПрдХ рдЧрдгрдирд╛ рдХреА рдЧрдИ рдкреНрд░реЙрдкрд░реНрдЯреА рд╣реИ
    error, // тЬЕ рдПрд░рд░ рдХреЛ рдПрдХреНрд╕рдкреЛрдЬ рдХрд░реЗрдВ
    clearError, // тЬЕ clearError рдХреЛ рдПрдХреНрд╕рдкреЛрдЬ рдХрд░реЗрдВ
    signIn, // тЬЕ signIn рдХреЛ рдПрдХреНрд╕рдкреЛрдЬ рдХрд░реЗрдВ
    signOut, // тЬЕ signOut рдХреЛ рдПрдХреНрд╕рдкреЛрдЬ рдХрд░реЗрдВ
  };

  return (
    <AuthContext.Provider value={authContextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used within an AuthProvider");
  return ctx;
};
