import React, { useRef, useState, useMemo, useCallback, useEffect } from 'react';
import { StandaloneSearchBox, GoogleMap, MarkerF, useLoadScript } from '@react-google-maps/api';

// рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпреЗ рд╕реНрдерд┐рд░ (Static) рдкрд░рд┐рднрд╛рд╖рд╛рдПрдБ рдХрдВрдкреЛрдиреЗрдВрдЯ рдХреЗ рдмрд╛рд╣рд░ рд╣реИрдВ
const containerStyle = { width: '100%', height: '200px' };
const LIBRARIES = ['places'] as ('places')[]; 
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

interface LatLngLiteral { lat: number; lng: number }

interface AddressInputProps {
  currentAddress: string;
  currentLocation: LatLngLiteral | null; // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ LatLngLiteral рдпрд╛ null рд╣реИ
  onLocationUpdate: (address: string, location: LatLngLiteral) => void;
}

const AddressInputWithMap: React.FC<AddressInputProps> = ({
  currentAddress,
  currentLocation,
  onLocationUpdate,
}) => {
  
  const { isLoaded, loadError } = useLoadScript({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || '',
    libraries: LIBRARIES,
  });

  const searchBoxRef = useRef<google.maps.places.SearchBox | null>(null);
  
  // тЬЕ NEW: Bundi/Jaipur рдХреЗ рдмрдЬрд╛рдп India Center рдХреЛ рд╣реА Fallback рд░рдЦреЗрдВ 
  const defaultCenter = useMemo(() => ({ lat: 20.5937, lng: 78.9629 }), []); 
  
  // тЬЕ NEW STATE: mapCenter рдХреЛ рд▓реЛрдХрд▓ рд╕реНрдЯреЗрдЯ рдореЗрдВ рд░рдЦреЗрдВ
  const [mapCenter, setMapCenter] = useState<LatLngLiteral>(currentLocation || defaultCenter);

  // тЬЕ EFFECT: рдЬрдм currentLocation рдмрджрд▓рддрд╛ рд╣реИ (рдпрд╛рдиреА Bundi/Jaipur рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ рд╕реЗрдЯ рд╣реИрдВ), рддреЛ рдореИрдк рдХреЛ рд╡рд╣рд╛рдВ рд▓реЗ рдЬрд╛рдПрдВ
  useEffect(() => {
      if (currentLocation) {
          setMapCenter(currentLocation);
      }
      // рдпрд╣ useEffect рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЬрдм Checkout2.tsx рд╕реЗ Bundi рдХреЗ рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ рдЖрддреЗ рд╣реИрдВ, 
      // рддреЛ рдореИрдк рд╡рд╣реАрдВ рдХреЗрдВрджреНрд░рд┐рдд рд╣реЛрддрд╛ рд╣реИред
  }, [currentLocation]);

  // **********************************
  // * Autocomplete рдФрд░ Dragging рд▓реЙрдЬрд┐рдХ *
  // **********************************

  const onPlacesChanged = useCallback(() => {
    if (searchBoxRef.current) {
      const places = searchBoxRef.current.getPlaces();
      if (places && places.length > 0) {
        const place = places[0];
        const newLat = place.geometry?.location?.lat();
        const newLng = place.geometry?.location?.lng();
        const newAddress = place.formatted_address;

        if (newLat !== undefined && newLng !== undefined && newAddress) {
          const newLocation = { lat: newLat, lng: newLng };
          onLocationUpdate(newAddress, newLocation);
          setMapCenter(newLocation); // тЬЕ рдореИрдк рд╕реЗрдВрдЯрд░ рдХреЛ рддреБрд░рдВрдд рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
        }
      }
    }
  }, [onLocationUpdate]);

  // AddressInputWithMap.tsx
const onMarkerDragEnd = useCallback((e: google.maps.MapMouseEvent) => {
    const newLat = e.latLng?.lat();
    const newLng = e.latLng?.lng();

    if (newLat !== undefined && newLng !== undefined) {
        const newLocation = { lat: newLat, lng: newLng };
        
        // Reverse Geocoding API рдХреЛ рдХреЙрд▓ рдХрд░рдХреЗ Lat/Lng рд╕реЗ рдПрдбреНрд░реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        const geocoder = new (window as any).google.maps.Geocoder();
        geocoder.geocode({ location: newLocation }, (results: any, status: any) => {
            if (status === 'OK' && results[0]) {
                // тЬЕ FIX 1: рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрддрд╛ рдорд┐рд▓рдиреЗ рдкрд░, рдЗрд╕реЗ onLocationUpdate рдореЗрдВ рднреЗрдЬреЗрдВ
                onLocationUpdate(results[0].formatted_address, newLocation); 
            } else {
                // рдпрджрд┐ Reverse Geocoding рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ, рддреЛ рдкреБрд░рд╛рдиреЗ рдПрдбреНрд░реЗрд╕ рдХреЗ рд╕рд╛рде Lat/Lng рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
                // (рдпрд╛ рдЖрдк рдПрдХ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╕рдВрджреЗрд╢ 'Unknown Address' рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ)
                onLocationUpdate(currentAddress, newLocation); 
            }
            setMapCenter(newLocation); 
        });
    }
}, [currentAddress, onLocationUpdate]);
  

  // **********************************
  // * Geolocation Logic *
  // **********************************
  
  const handleGeolocation = useCallback(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
        const newLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
        };
        
        // Geocoding API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдПрдбреНрд░реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        const geocoder = new (window as any).google.maps.Geocoder();
        geocoder.geocode({ location: newLocation }, (results: any, status: any) => {
            if (status === 'OK' && results[0]) {
                // тЬЕ FIX 2: рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрддрд╛ рдорд┐рд▓рдиреЗ рдкрд░, рдЗрд╕реЗ onLocationUpdate рдореЗрдВ рднреЗрдЬреЗрдВ
                onLocationUpdate(results[0].formatted_address, newLocation);
            } else {
                // рдЕрдЧрд░ Geocoding рд╡рд┐рдлрд▓ рд╣реЛ рдЬрд╛рдП, рддреЛ рдпреВрдЬрд╝рд░ рдХреЛ рдЕрд▓рд░реНрдЯ рджреЗрдВ
                onLocationUpdate("Location found, but address could not be determined.", newLocation);
            }
            setMapCenter(newLocation);
        });
    },
        (error) => {
          // рдпрд╣рд╛рдБ рд╡рд╣ рдПрд░рд░ рдЖрддреА рд╣реИ рдЬреЛ рдЖрдк рджреЗрдЦ рд░рд╣реЗ рдереЗ ("рдЖрдкрдХреА рд▓реЛрдХреЗрд╢рди рдХрд╛ рдкрддрд╛ рдирд╣реАрдВ рд▓рдЧрд╛ рдкрд╛ рд░рд╣реЗ")
          alert(`ЁЯУН рд▓реЛрдХреЗрд╢рди рдПрдХреНрд╕реЗрд╕ рдЕрд╕реНрд╡реАрдХреГрдд рдпрд╛ рд╡рд┐рдлрд▓: ${error.message}. рдХреГрдкрдпрд╛ рдореИрдк рдкрд░ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдкрд┐рди рдХрд░реЗрдВред`);
          // Geolocation рд╡рд┐рдлрд▓ рд╣реЛрдиреЗ рдкрд░ mapCenter рдХреЛ рдирд╣реАрдВ рдмрджрд▓реЗрдВред
        }
      );
    } else {
      alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЬрд┐рдпреЛрд▓реЛрдХреЗрд╢рди рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИред');
    }
  }, [currentAddress, onLocationUpdate]);

  // **********************************
  // * Render Logic *
  // **********************************

  if (loadError) return <div>рдирдХреНрд╢рд╛ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рдкрд╛рдпрд╛ред API рдХреБрдВрдЬреА рдЬрд╛рдБрдЪреЗрдВред</div>;
  // тЬЕ NEW: Bundi рдХреЗ рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ рдорд┐рд▓рдиреЗ рддрдХ 'рд▓реЛрдХреЗрд╢рди рд▓реЛрдбрд┐рдВрдЧ...' рджрд┐рдЦрд╛рдПрдВ
  if (!isLoaded || (!currentLocation && !mapCenter)) return <div>рд▓реЛрдХреЗрд╢рди рд▓реЛрдбрд┐рдВрдЧ...</div>; 

  return (
    <div>
      {/* 1. Places Autocomplete рдЗрдирдкреБрдЯ */}
      <StandaloneSearchBox
        onLoad={ref => searchBoxRef.current = ref}
        onPlacesChanged={onPlacesChanged}
      >
      // AddressInputWithMap.tsx (рд▓рдЧрднрдЧ рд▓рд╛рдЗрди 212)

<input
  type="text"
  placeholder="рдбрд┐рд▓реАрд╡рд░реА рдПрдбреНрд░реЗрд╕ рдЦреЛрдЬреЗрдВ рдпрд╛ рдЯрд╛рдЗрдк рдХрд░реЗрдВ"
  value={currentAddress}
  // тЭМ рдкрд╣рд▓реЗ рдХрд╛ рд▓реВрдк рдмрдирд╛рдиреЗ рд╡рд╛рд▓рд╛ рдХреЛрдб: 
  // onChange={(e) => onLocationUpdate(e.target.value, currentLocation || defaultCenter)} 
  
  // тЬЕ FIX: рдХреЗрд╡рд▓ Address рдЯреЗрдХреНрд╕реНрдЯ рдмрджрд▓реЗрдВ, Lat/Lng рдХреЛ рд╡реИрд╕рд╛ рд╣реА рд░рдЦреЗрдВ рдЬреЛ current рдореЗрдВ рд╣реИред
  onChange={(e) => onLocationUpdate(e.target.value, currentLocation || mapCenter)} 
  style={{ /* ... styles ... */ }}
/>

      </StandaloneSearchBox>

      {/* 2. рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдореИрдк */}
      <div style={{ marginTop: '10px' }}>
        <GoogleMap
          mapContainerStyle={containerStyle}
          center={mapCenter} // тЬЕ рд▓реЛрдХрд▓ рд╕реНрдЯреЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
          zoom={15}
        >
          {currentLocation && (
            <MarkerF
              position={currentLocation}
              draggable={true}
              onDragEnd={onMarkerDragEnd}
            />
          )}
        </GoogleMap>
      </div>

      {/* 3. рд▓рд╛рдЗрд╡ рд▓реЛрдХреЗрд╢рди рдмрдЯрди */}
      <button
        type="button"
        onClick={handleGeolocation} // тЬЕ useCallback рдлрд╝рдВрдХреНрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        style={{ marginTop: '10px', padding: '8px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
      >
        ЁЯУН рдореЗрд░реА рд╡рд░реНрддрдорд╛рди рд▓реЛрдХреЗрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
      </button>

      {/* 4. рдкреНрд░рджрд░реНрд╢рд┐рдд Lat/Lng (Debugging рдХреЗ рд▓рд┐рдП) */}
      {currentLocation && (
        <p style={{ fontSize: '12px', color: '#555' }}>
          Lat: {currentLocation.lat.toFixed(5)}, Lng: {currentLocation.lng.toFixed(5)}
        </p>
      )}
    </div>
  );
};

export default AddressInputWithMap;
