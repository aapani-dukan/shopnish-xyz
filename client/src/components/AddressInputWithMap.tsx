import React, { useRef, useState, useMemo, useCallback } from 'react';
import { StandaloneSearchBox, GoogleMap, MarkerF, useLoadScript } from '@react-google-maps/api';

// ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡•á ‡§∏‡•ç‡§•‡§ø‡§∞ (Static) ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Å ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à‡§Ç
const containerStyle = { width: '100%', height: '200px' };
const LIBRARIES = ['places'] as ('places')[]; 

// ‡§Æ‡§æ‡§® ‡§≤‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•Ä API Key ‡§Ü‡§™‡§ï‡•á .env ‡§∏‡•á ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

interface AddressInputProps {
  // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§î‡§∞ ‡§ï‡•ã‡§ë‡§∞‡•ç‡§°‡§ø‡§®‡•á‡§ü‡•ç‡§∏ (Lat/Lng) ‡§ï‡•ã ‡§™‡•à‡§∞‡•á‡§Ç‡§ü ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§∏‡•á ‡§≤‡•á‡§®‡§æ
  currentAddress: string;
  currentLocation: { lat: number; lng: number } | null;
  
  // ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§™‡•à‡§∞‡•á‡§Ç‡§ü ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§µ‡§æ‡§™‡§∏ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
  onLocationUpdate: (address: string, location: { lat: number; lng: number }) => void;
}

const AddressInputWithMap: React.FC<AddressInputProps> = ({
  currentAddress,
  currentLocation,
  onLocationUpdate,
}) => {
  
  // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø Google Maps ‡§î‡§∞ Places API ‡§≤‡•ã‡§° ‡§π‡•ã‡§Ç
  const { isLoaded, loadError } = useLoadScript({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || '',
    libraries: LIBRARIES,
  });

  const searchBoxRef = useRef<google.maps.places.SearchBox | null>(null);
  
  // ‡§Æ‡•à‡§™ ‡§ï‡•á ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ (center) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï default value
  const defaultCenter = useMemo(() => ({ lat: 20.5937, lng: 78.9629 }), []); // India Center

  // ‡§Æ‡•à‡§™ ‡§ï‡§æ center ‡§Ø‡§æ ‡§§‡•ã ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§π‡•ã‡§ó‡§æ, ‡§Ø‡§æ default ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§∏‡•á‡§Ç‡§ü‡§∞
  const mapCenter = useMemo(() => currentLocation || defaultCenter, [currentLocation, defaultCenter]);

  // ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ Autocomplete ‡§∏‡•á ‡§ï‡•ã‡§à ‡§ú‡§ó‡§π ‡§ö‡•Å‡§®‡§§‡§æ ‡§π‡•à
  const onPlacesChanged = useCallback(() => {
    if (searchBoxRef.current) {
      const places = searchBoxRef.current.getPlaces();
      if (places && places.length > 0) {
        const place = places[0];
        const newLat = place.geometry?.location?.lat();
        const newLng = place.geometry?.location?.lng();
        const newAddress = place.formatted_address;

        if (newLat !== undefined && newLng !== undefined && newAddress) {
          // ‡§™‡•à‡§∞‡•á‡§Ç‡§ü ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§î‡§∞ Lat/Lng ‡§≠‡•á‡§ú‡•á‡§Ç
          onLocationUpdate(newAddress, { lat: newLat, lng: newLng });
        }
      }
    }
  }, [onLocationUpdate]);

  // ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Æ‡•à‡§™ ‡§™‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡§∞ ‡§ï‡•ã ‡§°‡•ç‡§∞‡•à‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
  const onMarkerDragEnd = useCallback((e: google.maps.MapMouseEvent) => {
    const newLat = e.latLng?.lat();
    const newLng = e.latLng?.lng();

    if (newLat !== undefined && newLng !== undefined) {
      // Reverse Geocoding API ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡§ï‡•á Lat/Lng ‡§∏‡•á ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
      const geocoder = new (window as any).google.maps.Geocoder();
      geocoder.geocode({ location: { lat: newLat, lng: newLng } }, (results: any, status: any) => {
        if (status === 'OK' && results[0]) {
          const newAddress = results[0].formatted_address;
          onLocationUpdate(newAddress, { lat: newLat, lng: newLng });
        } else {
          // ‡§Ø‡§¶‡§ø Reverse Geocoding ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§ï‡•á‡§µ‡§≤ Lat/Lng ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
          onLocationUpdate(currentAddress, { lat: newLat, lng: newLng });
        }
      });
    }
  }, [currentAddress, onLocationUpdate]);

  if (loadError) return <div>‡§®‡§ï‡•ç‡§∂‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ‡•§ API ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç‡•§</div>;
  if (!isLoaded) return <div>‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó...</div>;

  return (
    <div>
      {/* 1. Places Autocomplete ‡§á‡§®‡§™‡•Å‡§ü */}
      <StandaloneSearchBox
        onLoad={ref => searchBoxRef.current = ref}
        onPlacesChanged={onPlacesChanged}
      >
        <input
          type="text"
          placeholder="‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç"
          value={currentAddress}
          onChange={(e) => onLocationUpdate(e.target.value, currentLocation || defaultCenter)} // ‡§ï‡•á‡§µ‡§≤ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§¨‡§¶‡§≤‡§®‡•á ‡§™‡§∞ Lat/Lng ‡§ï‡•ã default ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§™ ‡§® ‡§ü‡•Ç‡§ü‡•á)
          style={{
            boxSizing: `border-box`,
            border: `1px solid transparent`,
            width: `100%`,
            height: `40px`,
            padding: `0 12px`,
            borderRadius: `3px`,
            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,
            fontSize: `14px`,
            outline: `none`,
            textOverflow: `ellipses`,
          }}
        />
      </StandaloneSearchBox>

      {/* 2. ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Æ‡•à‡§™ */}
      <div style={{ marginTop: '10px' }}>
        <GoogleMap
          mapContainerStyle={containerStyle}
          center={mapCenter}
          zoom={15}
        >
          {currentLocation && (
            <MarkerF
              position={currentLocation}
              draggable={true} // ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§™‡§ø‡§® ‡§°‡•ç‡§∞‡•à‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç
              onDragEnd={onMarkerDragEnd}
            />
          )}
        </GoogleMap>
      </div>

      {/* 3. ‡§≤‡§æ‡§á‡§µ ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§¨‡§ü‡§® (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï) */}
      <button
        type="button"
        onClick={() => {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // Geocoding API ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
                const geocoder = new (window as any).google.maps.Geocoder();
                geocoder.geocode({ location: { lat, lng } }, (results: any, status: any) => {
                    if (status === 'OK' && results[0]) {
                        onLocationUpdate(results[0].formatted_address, { lat, lng });
                    } else {
                        alert('‡§Ü‡§™‡§ï‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ ‡§™‡§æ‡§è‡•§');
                    }
                });
              },
              (error) => {
                alert(`‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§: ${error.message}`);
              }
            );
          } else {
            alert('‡§Ü‡§™‡§ï‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡§ø‡§Ø‡•ã‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§');
          }
        }}
        style={{ marginTop: '10px', padding: '8px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
      >
        üìç ‡§Æ‡•á‡§∞‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
      </button>

      {/* 4. ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ Lat/Lng (Debugging ‡§ï‡•á ‡§≤‡§ø‡§è) */}
      {currentLocation && (
        <p style={{ fontSize: '12px', color: '#555' }}>
          Lat: {currentLocation.lat.toFixed(5)}, Lng: {currentLocation.lng.toFixed(5)}
        </p>
      )}
    </div>
  );
};

export default AddressInputWithMap;
