// client/src/components/AddressInputWithMap.tsx

import React, { useRef, useState, useMemo, useCallback, useEffect } from 'react';
import { StandaloneSearchBox, GoogleMap, MarkerF, useLoadScript } from '@react-google-maps/api';

const containerStyle = { width: '100%', height: '200px' };
const LIBRARIES = ['places'] as ('places')[];
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

interface LatLngLiteral {
  lat: number;
  lng: number;
}

// ‚úÖ NEW INTERFACE: ‡§Ö‡§¨ ‡§á‡§∏‡§Æ‡•á‡§Ç city ‡§î‡§∞ pincode ‡§≠‡•Ä ‡§π‡•ã‡§Ç‡§ó‡•á
interface GeocodedLocation extends LatLngLiteral {
  city: string;
  pincode: string;
}

interface AddressInputProps {
  currentAddress: string;
  currentLocation: LatLngLiteral | null;
  // ‚úÖ UPDATED PROP: ‡§Ö‡§¨ onLocationUpdate ‡§™‡•Ç‡§∞‡§æ GeocodedLocation ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§≤‡•á‡§ó‡§æ
  onLocationUpdate: (address: string, location: GeocodedLocation) => void;
}

// =========================================================================
// ‚úÖ HELPER FUNCTION: Geocoder Results ‡§∏‡•á City ‡§î‡§∞ Pincode ‡§®‡§ø‡§ï‡§æ‡§≤‡§§‡§æ ‡§π‡•à
// =========================================================================
const extractCityAndPincode = (results: any) => {
    let city = '';
    let pincode = '';
    
    if (results && results[0] && results[0].address_components) {
        results[0].address_components.forEach((component: any) => {
            // Pincode ‡§ï‡•ã 'postal_code' ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
            if (component.types.includes('postal_code')) {
                pincode = component.long_name;
            }
            
            // City ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§à ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç (locality ‡§∏‡§¨‡§∏‡•á ‡§Ü‡§Æ ‡§π‡•à)
            if (component.types.includes('locality')) {
                if (!city) city = component.long_name;
            }
            // ‡§Ø‡§¶‡§ø locality ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã administrative_area_level_2 (‡§ú‡§ø‡§≤‡§æ) ‡§ï‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç
            if (component.types.includes('administrative_area_level_2')) {
                if (!city) city = component.long_name;
            }
        });
    }
    // ‡§Ø‡§¶‡§ø ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§® ‡§Æ‡§ø‡§≤‡•á, ‡§§‡•ã ‡§ñ‡§æ‡§≤‡•Ä ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•å‡§ü‡§æ‡§è‡§Å
    return { city: city || '', pincode: pincode || '' }; 
};
// =========================================================================

const AddressInputWithMap: React.FC<AddressInputProps> = ({
  currentAddress,
  currentLocation,
  onLocationUpdate,
}) => {
  const { isLoaded, loadError } = useLoadScript({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || '',
    libraries: LIBRARIES,
  });

  const searchBoxRef = useRef<google.maps.places.SearchBox | null>(null);

  // Default center set to India center
  const defaultCenter = useMemo(() => ({ lat: 20.5937, lng: 78.9629 }), []); 
  const [mapCenter, setMapCenter] = useState<LatLngLiteral>(currentLocation || defaultCenter);

  useEffect(() => {
    if (currentLocation) {
      setMapCenter(currentLocation);
    }
  }, [currentLocation]);

  // =========================================================================
  // 1. Places Changed (Search Box)
  // =========================================================================
  const onPlacesChanged = useCallback(() => {
    if (searchBoxRef.current) {
      const places = searchBoxRef.current.getPlaces();
      if (places && places.length > 0) {
        const place = places[0];
        const newLat = place.geometry?.location?.lat();
        const newLng = place.geometry?.location?.lng();
        const newAddress = place.formatted_address;

        if (newLat !== undefined && newLng !== undefined && newAddress) {
          const newLocation: LatLngLiteral = { lat: newLat, lng: newLng };
          
          // ‚úÖ FIX: Reverse Geocode to get City/Pincode
          const geocoder = new (window as any).google.maps.Geocoder();
          geocoder.geocode({ location: newLocation }, (results: any, status: any) => {
            if (status === 'OK' && results[0]) {
                const { city, pincode } = extractCityAndPincode(results); 
                const updatedLocation: GeocodedLocation = { ...newLocation, city, pincode };
                
                // Address: Places API formatted_address ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡§π ‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à
                onLocationUpdate(newAddress, updatedLocation); 
            } else {
                // Geocoder ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä ‡§ñ‡§æ‡§≤‡•Ä Pincode/City ‡§≠‡•á‡§ú‡•á‡§Ç
                const updatedLocation: GeocodedLocation = { ...newLocation, city: '', pincode: '' };
                onLocationUpdate(newAddress, updatedLocation);
            }
            setMapCenter(newLocation);
          });
        }
      }
    }
  }, [onLocationUpdate]);

  // =========================================================================
  // 2. Marker Drag End
  // =========================================================================
  const onMarkerDragEnd = useCallback(
    (e: google.maps.MapMouseEvent) => {
      const newLat = e.latLng?.lat();
      const newLng = e.latLng?.lng();

      if (newLat !== undefined && newLng !== undefined) {
        const newLocation: LatLngLiteral = { lat: newLat, lng: newLng };

        const geocoder = new (window as any).google.maps.Geocoder();
        geocoder.geocode({ location: newLocation }, (results: any, status: any) => {
          if (status === 'OK' && results[0]) {
            const { city, pincode } = extractCityAndPincode(results);
            const updatedLocation: GeocodedLocation = { ...newLocation, city, pincode };
            
            // ‚úÖ FIX: Pincode/City ‡§≠‡•á‡§ú‡•á‡§Ç
            onLocationUpdate(results[0].formatted_address, updatedLocation); 
          } else {
            // ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä ‡§ñ‡§æ‡§≤‡•Ä Pincode/City ‡§≠‡•á‡§ú‡•á‡§Ç
            const updatedLocation: GeocodedLocation = { ...newLocation, city: '', pincode: '' };
            onLocationUpdate(currentAddress, updatedLocation); 
          }
          setMapCenter(newLocation);
        });
      }
    },
    [currentAddress, onLocationUpdate]
  );

  // =========================================================================
  // 3. Handle Geolocation (Current Location Button)
  // =========================================================================
  const handleGeolocation = useCallback(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const newLocation: LatLngLiteral = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          const geocoder = new (window as any).google.maps.Geocoder();
          geocoder.geocode({ location: newLocation }, (results: any, status: any) => {
            if (status === 'OK' && results[0]) {
              const { city, pincode } = extractCityAndPincode(results);
              const updatedLocation: GeocodedLocation = { ...newLocation, city, pincode };
              
              // ‚úÖ FIX: Pincode/City ‡§≠‡•á‡§ú‡•á‡§Ç
              onLocationUpdate(results[0].formatted_address, updatedLocation); 
            } else {
              // ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä ‡§ñ‡§æ‡§≤‡•Ä Pincode/City ‡§≠‡•á‡§ú‡•á‡§Ç
              const updatedLocation: GeocodedLocation = { ...newLocation, city: '', pincode: '' };
              onLocationUpdate('Location found, but address could not be determined.', updatedLocation);
            }
            setMapCenter(newLocation);
          });
        },
        (error) => {
          alert(
            `üìç ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§Ø‡§æ ‡§µ‡§ø‡§´‡§≤: ${error.message}. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•à‡§™ ‡§™‡§∞ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§`
          );
        }
      );
    } else {
      alert('‡§Ü‡§™‡§ï‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡§ø‡§Ø‡•ã‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§');
    }
  }, [onLocationUpdate]);

  if (loadError) return <div>‡§®‡§ï‡•ç‡§∂‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ‡•§ API ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç‡•§</div>;
  if (!isLoaded) return <div>‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó...</div>;

  return (
    <div>
      {/* 1. Places Autocomplete ‡§á‡§®‡§™‡•Å‡§ü */}
      <StandaloneSearchBox
        onLoad={(ref) => (searchBoxRef.current = ref)}
        onPlacesChanged={onPlacesChanged}
      >
        <input
          type="text"
          placeholder="‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç"
          value={currentAddress}
          onChange={(e) => onLocationUpdate(e.target.value, currentLocation ? { ...currentLocation, city: '', pincode: '' } : { lat: mapCenter.lat, lng: mapCenter.lng, city: '', pincode: '' })}
          style={{
            boxSizing: 'border-box',
            border: '1px solid #ccc',
            width: '100%',
            height: '40px',
            padding: '0 12px',
            borderRadius: '4px',
            marginTop: '8px',
          }}
        />
      </StandaloneSearchBox>

      {/* 2. ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Æ‡•à‡§™ */}
      <div style={{ marginTop: '10px' }}>
        <GoogleMap mapContainerStyle={containerStyle} center={mapCenter} zoom={15}>
          {currentLocation && (
            <MarkerF position={currentLocation} draggable={true} onDragEnd={onMarkerDragEnd} />
          )}
        </GoogleMap>
      </div>

      {/* 3. ‡§≤‡§æ‡§á‡§µ ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§¨‡§ü‡§® */}
      <button
        type="button"
        onClick={handleGeolocation}
        style={{
          marginTop: '10px',
          padding: '8px 15px',
          backgroundColor: '#4CAF50',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer',
        }}
      >
        üìç ‡§Æ‡•á‡§∞‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
      </button>

      {/* 4. Debug Lat/Lng */}
      {currentLocation && (
        <p style={{ fontSize: '12px', color: '#555' }}>
          Lat: {currentLocation.lat.toFixed(5)}, Lng: {currentLocation.lng.toFixed(5)}
        </p>
      )}
    </div>
  );
};

export default AddressInputWithMap;
