import React, { useState, useMemo, useCallback } from 'react';
import {
  GoogleMap,
  // ЁЯЫС MarkerF рдХреЛ AdvancedMarkerF рд╕реЗ рдмрджрд▓реЗрдВ
  AdvancedMarkerF,
  DirectionsService,
  DirectionsRenderer,
  useJsApiLoader,
  // ЁЯТб PinElementF рдХреЛ рднреА import рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдпрджрд┐ рдЖрдк default pins рдХреЛ customize рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ
} from '@react-google-maps/api';

interface Location {
  lat: number;
  lng: number;
  timestamp: string;
}

interface DeliveryAddress {
  address: string;
  city: string;
  pincode: string;
}

interface GoogleMapTrackerProps {
  deliveryBoyLocation: Location;
  customerAddress: DeliveryAddress;
}

const containerStyle = { width: '100%', height: '320px' };

// тЬЕ 1. 'marker' рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЬреЛрдбрд╝реА рдЧрдИ
const libraries: (
  | 'places'
  | 'geometry'
  | 'drawing'
  | 'localContext'
  | 'visualization'
  | 'marker' // <-- NEW!
)[] = ['places', 'geometry', 'marker']; // 'marker' library is necessary for Advanced Markers

const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

const GoogleMapTracker: React.FC<GoogleMapTrackerProps> = ({
  deliveryBoyLocation,
  customerAddress,
}) => {
  const [directionsResponse, setDirectionsResponse] =
    useState<google.maps.DirectionsResult | null>(null);

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || '',
    libraries,
  });

  const mapCenter = useMemo(() => deliveryBoyLocation, [deliveryBoyLocation]);

  const destination = useMemo(
    () =>
      `${customerAddress.address}, ${customerAddress.city}, ${customerAddress.pincode}`,
    [customerAddress]
  );

  const directionsCallback = useCallback(
    (response: google.maps.DirectionsResult | null) => {
      if (response && response.status === 'OK') {
        setDirectionsResponse(response);
      } else if (response) {
        console.error('Directions request failed:', response.status);
      }
    },
    []
  );
  
  // тЬЕ 2. mapOptions рдореЗрдВ Map ID рдЬреЛрдбрд╝реА рдЧрдИ (Advanced Markers рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ)
  const mapOptions = useMemo(
    () => ({
      zoom: 15,
      center: mapCenter,
      // Advanced Markers рдХреЗ рд▓рд┐рдП mapId рдЖрд╡рд╢реНрдпрдХ рд╣реИред
      // рдЖрдкрдХреЛ рдЕрдкрдиреЗ Google Cloud Console рд╕реЗ рдПрдХ Map ID рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреА рд╣реЛрдЧреАред
      mapId: 'DEMO_MAP_ID', // Testing рдХреЗ рд▓рд┐рдП 'DEMO_MAP_ID' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, Production рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА ID рдбрд╛рд▓реЗрдВ
    }),
    [mapCenter]
  );
  
  if (loadError) {
    return <div>Google Maps failed to load: {String(loadError)}</div>;
  }

  if (!isLoaded) {
    return <div>Loading Google MapsтАж</div>;
  }
  
  // ЁЯЫС рдкреБрд░рд╛рдиреЗ google.maps.Size рдХрд╛ рдЙрдкрдпреЛрдЧ рдЕрдм Advanced Markers рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВ рд╣реИ, 
  // рдФрд░ рдпрд╣ MarkerF рдХреЗ рд▓рд┐рдП ReferenceError рдХрд╛ рдХрд╛рд░рдг рдмрди рд╕рдХрддрд╛ рдерд╛ред
  // Advanced Markers рдХреЗ рд▓рд┐рдП рд╣рдо MarkerF/AdvancedMarkerF рдХрдВрдкреЛрдиреЗрдВрдЯ рдореЗрдВ рд╕реАрдзреЗ
  // custom content рдпрд╛ PinElementF рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
  // рдЪреВрдВрдХрд┐ AdvancedMarkerF рдХреЛ default рдореЗрдВ рдПрдХ advanced pin рдорд┐рд▓ рдЬрд╛рддрд╛ рд╣реИ, рд╣рдо 'icon' prop рдХреЛ рд╣рдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВред

  return (
    <GoogleMap
      mapContainerStyle={containerStyle}
      options={mapOptions} // Updated to use mapOptions
    >
      {/* Directions Service рдХреЛ рд╕рд┐рд░реНрдл рддрдм рдЪрд▓рд╛рдПрдВ рдЬрдм data рдЙрдкрд▓рдмреНрдз рд╣реЛ */}
      {mapCenter && destination && (
          <DirectionsService
            options={{
              origin: mapCenter,
              destination,
              travelMode: google.maps.TravelMode.DRIVING,
            }}
            callback={directionsCallback}
          />
      )}
      
      {directionsResponse && (
        <DirectionsRenderer
          options={{ directions: directionsResponse, suppressMarkers: true }}
        />
      )}
      
      {/* ЁЯЫС MarkerF рдХреЛ AdvancedMarkerF рд╕реЗ рдмрджрд▓реЗрдВ */}
      <AdvancedMarkerF
        position={deliveryBoyLocation}
        // icon prop рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдХреНрдпреЛрдВрдХрд┐ Advanced Marker рдХреЛ icon рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ content prop рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИред
        // Default Advanced Marker Pin рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрдЧрд╛ред
        title="Delivery Partner"
      />
      
      {directionsResponse?.routes?.[0]?.legs?.[0]?.end_location && (
        // ЁЯЫС MarkerF рдХреЛ AdvancedMarkerF рд╕реЗ рдмрджрд▓реЗрдВ
        <AdvancedMarkerF
          position={directionsResponse.routes[0].legs[0].end_location}
          // Default Advanced Marker Pin рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрдЧрд╛ред
          title="Customer Location"
        />
      )}
    </GoogleMap>
  );
};

export default React.memo(GoogleMapTracker);
