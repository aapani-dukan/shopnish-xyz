import React, { useState, useMemo, useCallback } from "react";
import {
  GoogleMap,
  MarkerF,
  DirectionsService,
  DirectionsRenderer,
  useJsApiLoader,
} from "@react-google-maps/api";

// ----------------------------
// ‚úÖ Interfaces
// ----------------------------
interface Location {
  lat: number;
  lng: number;
  timestamp: string;
}

interface DeliveryAddress {
  address: string;
  city: string;
  pincode: string;
  lat?: number;
  lng?: number;
}

interface GoogleMapTrackerProps {
  deliveryBoyLocation: Location | null;
  customerAddress: DeliveryAddress | null;
}

// ----------------------------
// ‚úÖ Constants
// ----------------------------
const containerStyle = { width: "100%", height: "320px" };

const libraries: (
  | "places"
  | "geometry"
  | "drawing"
  | "localContext"
  | "visualization"
  | "marker"
)[] = ["places", "geometry", "marker"];

const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

// ----------------------------
// ‚úÖ Component
// ----------------------------
const GoogleMapTracker: React.FC<GoogleMapTrackerProps> = ({
  deliveryBoyLocation,
  customerAddress,
}) => {
  const [directionsResponse, setDirectionsResponse] =
    useState<google.maps.DirectionsResult | null>(null);

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || "",
    libraries,
  });

  // ----------------------------
  // ‚úÖ Safe Fallback Logic
  // ----------------------------
  // ‡§Ø‡§¶‡§ø customerAddress ‡§Æ‡•á‡§Ç lat/lng ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§Ö‡§®‡•ç‡§Ø‡§•‡§æ deliveryBoyLocation ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§
  const lat =
    customerAddress?.lat ??
    (deliveryBoyLocation ? deliveryBoyLocation.lat : 0);
  const lng =
    customerAddress?.lng ??
    (deliveryBoyLocation ? deliveryBoyLocation.lng : 0);

  const customerLatLng = { lat, lng };

  // ----------------------------
  // ‚úÖ Map Center
  // ----------------------------
  const mapCenter = useMemo(
    () =>
      deliveryBoyLocation ?? {
        lat: customerLatLng.lat,
        lng: customerLatLng.lng,
        timestamp: "",
      },
    [deliveryBoyLocation, customerLatLng]
  );

  // ----------------------------
  // ‚úÖ Destination (LatLng preferred)
  // ----------------------------
  const destination = useMemo(() => {
    if (!customerAddress) return "";
    
    // Note: ‡§Ø‡§π‡§æ‡§Å google.maps.LatLng ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§§‡§¨ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à ‡§ú‡§¨ ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§∞‡•á‡§Ç‡§°‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•ã,
    // ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡§π useMemo ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à‡•§
    return customerAddress.lat && customerAddress.lng
      ? { lat: customerAddress.lat, lng: customerAddress.lng } // Simple LatLng object
      : `${customerAddress.address}, ${customerAddress.city}, ${customerAddress.pincode}`;
  }, [customerAddress]);

  // ----------------------------
  // ‚úÖ Directions Callback
  // ----------------------------
  const directionsCallback = useCallback(
    (response: google.maps.DirectionsResult | null) => {
      if (response && response.status === "OK") {
        setDirectionsResponse(response);
      } else if (response) {
        console.error("Directions request failed:", response.status);
      }
    },
    []
  );

  // ----------------------------
  // üöÄ FIX: Marker Icons (Simple Objects to avoid React Error #310)
  // ----------------------------
  const { bikeIcon, homeIcon } = useMemo(() => {
    // ‡§π‡§Æ ‡§∏‡•Ä‡§ß‡•á Google Maps ‡§ï‡§Ç‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ü‡§∞ (‡§ú‡•à‡§∏‡•á new maps.Size()) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡§§‡•á ‡§π‡•à‡§Ç
    // ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡•á ‡§ú‡§ü‡§ø‡§≤ ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ React ‡§ï‡•á ‡§á‡§Ç‡§ü‡§∞‡§®‡§≤ ‡§∏‡•ç‡§ü‡•á‡§ü ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§ï‡•ç‡§∞‡•à‡§∂ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç (Error #310).
    
    // Delivery Partner Icon (bike/motorcycle)
    const bikeIcon = {
      url: "https://maps.google.com/mapfiles/kml/pal2/icon2.png", // ‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ URL
      scaledSize: { width: 32, height: 32 }, // Simple object for size
      anchor: { x: 16, y: 16 }, // Simple object for anchor point
    };

    // Customer Location Icon (home)
    const homeIcon = {
      url: "https://maps.google.com/mapfiles/kml/pal4/icon54.png", // ‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ URL
      scaledSize: { width: 32, height: 32 },
      anchor: { x: 16, y: 32 },
    };

    return { bikeIcon, homeIcon };
  }, []); // isLoaded ‡§ï‡•ã dependency ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡•á ‡§ï‡•á‡§µ‡§≤ ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ JS ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•à‡§Ç


  // ----------------------------
  // ‚úÖ Map Load & Data Guards
  // ----------------------------
  if (loadError) {
    return <div>Google Maps failed to load: {String(loadError)}</div>;
  }

  if (!isLoaded) {
    return <div>Loading Google Maps‚Ä¶</div>;
  }
  
  // Note: TrackOrder.tsx ‡§Æ‡•á‡§Ç ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§π‡•ã ‡§ö‡•Å‡§ï‡•Ä ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π‡§æ‡§Å ‡§°‡§¨‡§≤-‡§ö‡•á‡§ï ‡§†‡•Ä‡§ï ‡§π‡•à‡•§
  if (!deliveryBoyLocation || !customerAddress) {
    return (
      <div className="w-full h-80 flex items-center justify-center text-gray-500 bg-gray-100">
        Delivery address or location information is missing.
      </div>
    );
  }

  // ----------------------------
  // ‚úÖ Map Options
  // ----------------------------
  const mapOptions = useMemo(
    () => ({
      zoom: 15,
      center: mapCenter,
      mapId: "SHOPNISH_TRACK_MAP",
      disableDefaultUI: false,
    }),
    [mapCenter]
  );

  // ----------------------------
  // ‚úÖ Render Map
  // ----------------------------
  return (
    <GoogleMap mapContainerStyle={containerStyle} options={mapOptions}>
      {/* Directions Service */}
      {/* üöÄ FIX: Direction Service ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§ö‡§≤‡§æ‡§è‡§Ç ‡§ú‡§¨ mapCenter ‡§î‡§∞ deliveryBoyLocation ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•ã‡§Ç */}
      {deliveryBoyLocation && destination && (
        <DirectionsService
          options={{
            origin: deliveryBoyLocation,
            // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§ï‡•á‡§µ‡§≤ LatLng ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§π‡•à
            destination: destination as string | google.maps.LatLng, 
            travelMode: google.maps.TravelMode.DRIVING,
          }}
          callback={directionsCallback}
        />
      )}

      {/* Directions Renderer */}
      {directionsResponse && (
        <DirectionsRenderer
          options={{ directions: directionsResponse, suppressMarkers: true }}
        />
      )}

      {/* Delivery Boy Marker */}
      {/* bikeIcon ‡§Ö‡§¨ ‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡§æ‡§¶‡§æ JS ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•à */}
      <MarkerF
        position={deliveryBoyLocation}
        icon={bikeIcon}
        title="Delivery Partner"
      />

      {/* Customer Marker */}
      {/* homeIcon ‡§Ö‡§¨ ‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡§æ‡§¶‡§æ JS ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•à */}
      <MarkerF
        position={customerLatLng}
        icon={homeIcon}
        title="Customer Location"
      />
    </GoogleMap>
  );
};

export default React.memo(GoogleMapTracker);
