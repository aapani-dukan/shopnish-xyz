import React, { useState, useMemo, useCallback } from "react";
import {
  GoogleMap,
  MarkerF,
  DirectionsService,
  DirectionsRenderer,
  useJsApiLoader,
} from "@react-google-maps/api";

// ----------------------------
// ‚úÖ Interfaces (Unchanged)
// ----------------------------
interface Location {
  lat: number;
  lng: number;
  timestamp: string;
}

interface DeliveryAddress {
  address: string;
  city: string;
  pincode: string;
  lat?: number;
  lng?: number;
}

interface GoogleMapTrackerProps {
  deliveryBoyLocation: Location | null;
  customerAddress: DeliveryAddress | null;
}

// ----------------------------
// ‚úÖ Constants (Unchanged)
// ----------------------------
const containerStyle = { width: "100%", height: "320px" };
const libraries: (
  | "places"
  | "geometry"
  | "drawing"
  | "localContext"
  | "visualization"
  | "marker"
)[] = ["places", "geometry", "marker"];
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

// ----------------------------
// ‚úÖ Component
// ----------------------------
const GoogleMapTracker: React.FC<GoogleMapTrackerProps> = ({
  deliveryBoyLocation,
  customerAddress,
}) => {
  const [directionsResponse, setDirectionsResponse] =
    useState<google.maps.DirectionsResult | null>(null);

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || "",
    libraries,
  });

  // ----------------------------
  // üöÄ FIX 1: Customer Location ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
  // ----------------------------
  const customerLatLng = useMemo(() => {
    // ‡§Ø‡§π ‡§Ö‡§¨ ‡§ï‡•á‡§µ‡§≤ customerAddress ‡§ï‡•á lat/lng ‡§¨‡§¶‡§≤‡§®‡•á ‡§™‡§∞ ‡§π‡•Ä ‡§®‡§Ø‡§æ ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§ó‡§æ
    const lat = customerAddress?.lat ?? 0;
    const lng = customerAddress?.lng ?? 0;
    return { lat, lng };
  }, [customerAddress?.lat, customerAddress?.lng]);

  // ----------------------------
  // üöÄ FIX 2: Map Center ‡§ï‡•ã ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ï‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§∏‡•á ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
  // ----------------------------
  const mapCenter = useMemo(() => {
    // ‡§∏‡•á‡§Ç‡§ü‡§∞ ‡§π‡§Æ‡•á‡§∂‡§æ deliveryBoyLocation ‡§π‡•ã‡§ó‡§æ ‡§Ø‡§¶‡§ø ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§Ö‡§®‡•ç‡§Ø‡§•‡§æ customerLatLng
    return deliveryBoyLocation
      ? { lat: deliveryBoyLocation.lat, lng: deliveryBoyLocation.lng }
      : customerLatLng;
  }, [
    deliveryBoyLocation?.lat,
    deliveryBoyLocation?.lng,
    customerLatLng.lat,
    customerLatLng.lng,
  ]);

  // ----------------------------
  // üöÄ FIX 3: Destination ‡§ï‡•ã ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
  // ----------------------------
  const destination = useMemo(() => {
    if (!customerAddress) return "";
    
    if (customerAddress.lat && customerAddress.lng) {
        return { lat: customerAddress.lat, lng: customerAddress.lng }; 
    }
    
    return `${customerAddress.address}, ${customerAddress.city}, ${customerAddress.pincode}`;
  }, [customerAddress?.address, customerAddress?.city, customerAddress?.pincode, customerAddress?.lat, customerAddress?.lng]);


  // ----------------------------
  // ‚úÖ Directions Callback (Unchanged)
  // ----------------------------
  const directionsCallback = useCallback(
    (response: google.maps.DirectionsResult | null) => {
      // DirectionsResponse ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§Ø‡§π DirectionsService ‡§∏‡•á ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§è
      if (response && response.status === "OK") {
        setDirectionsResponse(response);
      } else if (response) {
        console.error("Directions request failed:", response.status);
        // Error ‡§™‡§∞ ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§≠‡•Ä ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
        if (directionsResponse) setDirectionsResponse(null); 
      }
    },
    [directionsResponse] // directionsResponse ‡§ï‡•ã dependency ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§â‡§ö‡§ø‡§§ ‡§π‡•à
  );

  // ----------------------------
  // ‚úÖ Marker Icons (Stateless and Unchanged)
  // ----------------------------
  const { bikeIcon, homeIcon } = useMemo(() => {
    // Note: ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ø‡§π‡§æ‡§Å URL ‡§ï‡•ã ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§∞‡§ñ‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•á Icon Paths ‡§∏‡•á ‡§¨‡§¶‡§≤‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
    const bikeIcon = {
      url: "http://maps.google.com/mapfiles/kml/pal2/icon10.png", 
      scaledSize: { width: 32, height: 32 },
    };

    const homeIcon = {
      url: "http://maps.google.com/mapfiles/kml/pal2/icon3.png",
      scaledSize: { width: 32, height: 32 },
    };

    return { bikeIcon, homeIcon };
  }, []); 

  // ----------------------------
  // ‚úÖ Load & Error Guards (Unchanged)
  // ----------------------------
  if (loadError) {
    return <div>Google Maps failed to load: {String(loadError)}</div>;
  }

  if (!isLoaded) {
    return <div>Loading Google Maps‚Ä¶</div>;
  }

  if (!deliveryBoyLocation || !customerAddress) {
    return (
      <div className="w-full h-80 flex items-center justify-center text-gray-500 bg-gray-100">
        Delivery address or location information is missing.
      </div>
    );
  }
  
  // ----------------------------
  // üöÄ FIX 4: Map Options ‡§ï‡•ã ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
  // ----------------------------
  const mapOptions = useMemo(
    () => ({
      zoom: 15,
      center: mapCenter, // mapCenter ‡§Ö‡§¨ stable ‡§π‡•à
      mapId: "SHOPNISH_TRACK_MAP",
      disableDefaultUI: false,
    }),
    [mapCenter]
  );

  // ----------------------------
  // ‚úÖ Render Map
  // ----------------------------
  return (
    <GoogleMap mapContainerStyle={containerStyle} options={mapOptions}>
      {/* Directions Service */}
      {deliveryBoyLocation && destination && (
        <DirectionsService
          options={{
            // location object ‡§Æ‡•á‡§Ç ‡§ï‡•á‡§µ‡§≤ lat/lng ‡§™‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
            origin: { lat: deliveryBoyLocation.lat, lng: deliveryBoyLocation.lng }, 
            destination: destination, 
            travelMode: google.maps.TravelMode.DRIVING,
          }}
          callback={directionsCallback}
        />
      )}

      {/* Directions Renderer */}
      {directionsResponse && (
        <DirectionsRenderer
          options={{ directions: directionsResponse, suppressMarkers: true }}
        />
      )}

      {/* Delivery Boy Marker */}
      <MarkerF
        position={{ lat: deliveryBoyLocation.lat, lng: deliveryBoyLocation.lng }}
        icon={bikeIcon}
        title="Delivery Partner"
      />

      {/* Customer Marker */}
      <MarkerF
        position={customerLatLng}
        icon={homeIcon}
        title="Customer Location"
      />
    </GoogleMap>
  );
};

export default React.memo(GoogleMapTracker);

