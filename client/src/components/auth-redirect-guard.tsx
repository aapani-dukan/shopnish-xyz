// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation, useNavigate } from "react-router-dom"; // ‚úÖ wouter ‡§∏‡•á react-router-dom ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç

// ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§•‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä
const PUBLIC_PATHS = [
"/",
"/product/",
"/cart",
"/checkout",
// ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§• ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
];

// ‡§≤‡•â‡§ó‡§ø‡§®/Firebase handler ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§ë‡§• ‡§™‡§æ‡§•
const AUTH_SPECIFIC_PATHS = [
"/auth",
"/login",
"/admin-login",
// "/__/auth/handler", // Firebase Auth handler path, if used, ‡§Ö‡§¨ ‡§á‡§∏‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§ï‡§Æ ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø Firebase ‡§á‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡§æ ‡§π‡•à
];

export function AuthRedirectGuard() {
const navigate = useNavigate(); // ‚úÖ react-router-dom ‡§∏‡•á useNavigate
const location = useLocation(); // ‚úÖ react-router-dom ‡§∏‡•á useLocation
const intent = localStorage.getItem('redirectIntent');
const { user, isLoadingAuth, isAuthenticated } = useAuth();

useEffect(() => {
console.group("AuthRedirectGuard Log");
console.log("AuthRedirectGuard useEffect triggered.");
console.log("isLoadingAuth:", isLoadingAuth);
console.log("isAuthenticated:", isAuthenticated);
console.log("Current user (UID):", user?.uid || "null"); // UID ‡§ï‡•ã UID ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç, UUID ‡§®‡§π‡•Ä‡§Ç
console.log("Current location:", location.pathname); // ‚úÖ .pathname ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
console.log("Intent from localStorage:", intent);

// Step 1: ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§§‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç
if (isLoadingAuth) {
console.log("AuthRedirectGuard: Still loading auth, returning.");
console.groupEnd();
return;
}

// ‡§ï‡•Å‡§õ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§∏
const currentPath = location.pathname; // ‚úÖ location.pathname ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
const isOnPublicPath = PUBLIC_PATHS.some(
(path) => currentPath === path || (path.endsWith("/") ? currentPath.startsWith(path) : currentPath.startsWith(path + '/'))
);
const isOnAuthSpecificPath = AUTH_SPECIFIC_PATHS.some(
(path) => currentPath === path || currentPath.startsWith(path + '/') || currentPath.includes(path)
);

// --- ‚úÖ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ 1: 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç ---
if (intent === "become-seller") {
console.log("AuthRedirectGuard: 'become-seller' intent found.");

// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§î‡§∞ 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á /auth ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
// ‡§§‡§æ‡§ï‡§ø ‡§µ‡§π ‡§™‡§π‡§≤‡•á ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞ ‡§∏‡§ï‡•á ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§π‡§Æ ‡§â‡§∏‡•á /seller-apply ‡§™‡§∞ ‡§≠‡•á‡§ú ‡§∏‡§ï‡•á‡§Ç
if (!isAuthenticated) {
console.log("AuthRedirectGuard: Not authenticated with 'become-seller' intent. Redirecting to /auth.");
// ‡§π‡§Æ intent ‡§ï‡•ã localStorage ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç‡§ó‡•á ‡§§‡§æ‡§ï‡§ø ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§â‡§∏‡•á ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á
navigate("/auth", { replace: true });
console.groupEnd();
return;
}

// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à ‡§î‡§∞ 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à
if (isAuthenticated) {
// ‡§π‡§Æ ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø AuthPage.tsx (‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶) ‡§á‡§∏ ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§ó‡§æ
// ‡§î‡§∞ /seller-apply ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
// ‡§Ø‡§π ‡§ó‡§æ‡§∞‡•ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡§ø ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä seller-apply ‡§™‡§∞ ‡§π‡•à
// ‡§î‡§∞ ‡§â‡§∏‡§ï‡§æ ‡§∞‡•ã‡§≤ ‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§†‡•Ä‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§â‡§∏‡•á ‡§∏‡§π‡•Ä ‡§ú‡§ó‡§π ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§è‡•§

const approvalStatus = user?.seller?.approvalStatus;    
let sellerTargetPath: string;    

if (user?.role === "seller") {    
  if (approvalStatus === "approved") {    
    sellerTargetPath = "/seller-dashboard";    
  } else if (approvalStatus === "pending") {    
    sellerTargetPath = "/seller-status";    
  } else {     
    sellerTargetPath = "/seller-apply";     
  }    
} else {    
  sellerTargetPath = "/seller-apply";     
}    
    
// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§∏‡§π‡•Ä ‡§∏‡•á‡§≤‡§∞ ‡§™‡§æ‡§• ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç    
if (currentPath !== sellerTargetPath && !currentPath.startsWith(sellerTargetPath + '/')) {    
  console.log(`AuthRedirectGuard: Logged in with 'become-seller' intent, redirecting to designated seller path: ${sellerTargetPath}`);    
  localStorage.removeItem('redirectIntent'); // ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç    
  navigate(sellerTargetPath, { replace: true });    
  console.groupEnd();    
  return;    
}    
console.log("AuthRedirectGuard: User already on correct seller intent path. Staying put.");    
localStorage.removeItem('redirectIntent'); // ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç    
console.groupEnd();     
return;

}
}

// --- ‡§Ö‡§¨ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§î‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï (‡§ú‡§¨ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§® ‡§π‡•ã) ---

// --- üîí ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ---
if (!isAuthenticated) {
console.log("AuthRedirectGuard: User not logged in.");

// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä auth-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à (‡§ú‡•à‡§∏‡•á /auth, /login)
if (isOnAuthSpecificPath) {
console.log("AuthRedirectGuard: Not logged in user on auth-specific path. Staying put.");
console.groupEnd();
return;
}

// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à (‡§ú‡•à‡§∏‡•á /, /product, /cart)
if (isOnPublicPath) {
console.log("AuthRedirectGuard: Not logged in user on public path. Staying put.");
console.groupEnd();
return;
}

// ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§î‡§∞ ‡§® ‡§π‡•Ä ‡§ï‡§ø‡§∏‡•Ä auth-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ø‡§æ ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à
console.log("AuthRedirectGuard: Not logged in user on restricted non-public path. Redirecting to /auth.");
navigate("/auth", { replace: true });
console.groupEnd();
return;
}

// --- üîì ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à (isAuthenticated ‡§Ö‡§¨ true ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§•‡§æ) ---
console.log(
"AuthRedirectGuard: User is logged in. Current role:",
user?.role,
"Approval Status:",
user?.seller?.approvalStatus
);

// ‚úÖ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ 2: ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à ‡§î‡§∞ 'auth-specific' ‡§™‡•á‡§ú ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§π‡•ã‡§Æ ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
if (isOnAuthSpecificPath) {
console.log("AuthRedirectGuard: Logged in user on auth-specific page. Redirecting to /.");
navigate("/", { replace: true });
console.groupEnd();
return;
}

// --- ‡§∞‡•ã‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï ---
let targetPath: string | null = null;

switch (user?.role) {
case "seller": {
const approvalStatus = user.seller?.approvalStatus;
if (approvalStatus === "approved") {
targetPath = "/seller-dashboard";
} else if (approvalStatus === "pending") {
targetPath = "/seller-status";
} else { // seller ‡§∞‡•ã‡§≤ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Ø‡§æ approved/pending ‡§®‡§π‡•Ä‡§Ç
targetPath = "/seller-apply";
}

// ‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡§æ‡§• ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç    
if (!currentPath.startsWith("/seller-") && targetPath && currentPath !== targetPath && !currentPath.startsWith(targetPath + '/')) {    
  console.log(`AuthRedirectGuard: Seller on non-seller path, redirecting to ${targetPath}`);    
  navigate(targetPath, { replace: true });    
  console.groupEnd();    
  return;    
}    
break;

}

case "admin":
targetPath = "/admin-dashboard";
if (!currentPath.startsWith(targetPath)) {
console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
navigate(targetPath, { replace: true });
console.groupEnd();
return;
}
break;

case "delivery":
targetPath = "/delivery-dashboard";
if (!currentPath.startsWith(targetPath)) {
console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
navigate(targetPath, { replace: true });
console.groupEnd();
return;
}
break;

case "customer":
default:
// ‡§Ø‡§¶‡§ø ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§Ø‡§æ ‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§è‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§π‡•ã‡§Æ ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
if (
currentPath.startsWith("/seller-") ||
currentPath.startsWith("/admin-") ||
currentPath.startsWith("/delivery-")
) {
console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
navigate("/", { replace: true });
console.groupEnd();
return;
}
break;
}

console.log("AuthRedirectGuard: Logged in user on appropriate path, staying put.");
console.groupEnd();

}, [user, isLoadingAuth, isAuthenticated, location.pathname, navigate, intent]);

return null;
}
