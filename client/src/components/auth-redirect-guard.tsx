// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation, useNavigate } from "react-router-dom";

// ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§•‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä
const PUBLIC_PATHS = [
  "/",
  "/product/", // /product/something ‡§ï‡•á ‡§≤‡§ø‡§è
  "/cart",
  "/checkout",
  "/auth", // AuthPage ‡§ñ‡•Å‡§¶ ‡§è‡§ï ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§™‡§æ‡§• ‡§π‡•à ‡§ú‡§π‡§æ‡§Ç ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
  // ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§• ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
];

// ‡§∞‡•ã‡§≤-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§• (‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø)
const ROLE_DASHBOARD_PATHS = {
  seller: "/seller-dashboard",
  admin: "/admin-dashboard",
  delivery: "/delivery-dashboard",
  customer: "/", // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•ã‡§Æ ‡§™‡•á‡§ú
};

// ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ-‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡§•
const SELLER_SPECIFIC_PATHS = {
  apply: "/seller-apply",
  status: "/seller-status",
  dashboard: "/seller-dashboard", // ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§≠‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
};

export function AuthRedirectGuard() {
  const navigate = useNavigate();
  const location = useLocation();
  const intent = localStorage.getItem('redirectIntent'); // 'redirectIntent' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç

  // ‚úÖ useAuth ‡§∏‡•á user, isLoadingAuth, isAuthenticated ‡§∏‡•Ä‡§ß‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
  const { user, isLoadingAuth, isAuthenticated } = useAuth();

  useEffect(() => {
    console.group("AuthRedirectGuard Log");
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("Current user (UID):", user?.uid || "null");
    console.log("Current location:", location.pathname);
    console.log("Intent from localStorage:", intent);
    console.log("User role from AuthContext:", user?.role);
    // ‚úÖ user.seller?.approvalStatus ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§ú‡•à‡§∏‡§æ ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á useAuth ‡§Æ‡•á‡§Ç ‡§π‡•à
    console.log("User seller approval status from AuthContext:", user?.seller?.approvalStatus);

    // Step 1: ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§§‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      console.groupEnd();
      return;
    }

    const currentPath = location.pathname;

    // ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡§• ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§• ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à
    const isOnPublicPath = PUBLIC_PATHS.some(
      (path) => currentPath === path || (path.endsWith("/") && currentPath.startsWith(path))
    );

    // ‚úÖ AUTH_SPECIFIC_PATHS ‡§ï‡•ã PUBLIC_PATHS ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡§ï‡•Ä ‡§Ö‡§≤‡§ó ‡§∏‡•á ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
    // ‡§Ø‡§¶‡§ø /auth ‡§è‡§ï ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§• ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡§ï‡§æ ‡§Ö‡§≤‡§ó ‡§∏‡•á ‡§ü‡•ç‡§∞‡•à‡§ï ‡§∞‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à

    // --- ‚úÖ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ 1: 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç ---
    if (intent === "become-seller") {
      console.log("AuthRedirectGuard: 'become-seller' intent found.");

      // ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§≤‡•â‡§ó ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§î‡§∞ 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á /auth ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
      if (!isAuthenticated) {
        console.log("AuthRedirectGuard: Not authenticated with 'become-seller' intent. Redirecting to /auth.");
        navigate("/auth", { replace: true });
        console.groupEnd();
        return;
      }

      // ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à ‡§î‡§∞ 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à
      if (isAuthenticated) {
        let sellerTargetPath: string;
        const approvalStatus = user?.seller?.approvalStatus;

        if (user?.role === "seller") {
          if (approvalStatus === "approved") {
            sellerTargetPath = SELLER_SPECIFIC_PATHS.dashboard;
          } else if (approvalStatus === "pending") {
            sellerTargetPath = SELLER_SPECIFIC_PATHS.status;
          } else { // ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ 'seller' ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§Ö‡§®‡•Å‡§Æ‡•ã‡§¶‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Ø‡§æ ‡§Ö‡§ú‡•ç‡§û‡§æ‡§§
            sellerTargetPath = SELLER_SPECIFIC_PATHS.apply;
          }
        } else { // ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ 'customer' ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§π‡•à, ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡§®‡•á ‡§¶‡•á‡§Ç
          sellerTargetPath = SELLER_SPECIFIC_PATHS.apply;
        }

        // ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§∏‡§π‡•Ä ‡§∏‡•á‡§≤‡§∞ ‡§™‡§æ‡§• ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        if (currentPath !== sellerTargetPath && !currentPath.startsWith(sellerTargetPath + '/')) {
          console.log(`AuthRedirectGuard: Logged in with 'become-seller' intent, redirecting to designated seller path: ${sellerTargetPath}`);
          localStorage.removeItem('redirectIntent'); // ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
          navigate(sellerTargetPath, { replace: true });
          console.groupEnd();
          return;
        }
        console.log("AuthRedirectGuard: User already on correct seller intent path. Staying put.");
        localStorage.removeItem('redirectIntent'); // ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
        console.groupEnd();
        return;
      }
    }

    // --- ‡§Ö‡§¨ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§î‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï (‡§ú‡§¨ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§® ‡§π‡•ã) ---

    // --- üîí ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ---
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in.");

      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§µ‡§π‡•Ä‡§Ç ‡§∞‡§π‡§®‡•á ‡§¶‡•á‡§Ç
      if (isOnPublicPath) {
        console.log("AuthRedirectGuard: Not logged in user on public path. Staying put.");
        console.groupEnd();
        return;
      }

      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ó‡•à‡§∞-‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã /auth ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
      console.log("AuthRedirectGuard: Not logged in user on restricted non-public path. Redirecting to /auth.");
      navigate("/auth", { replace: true });
      console.groupEnd();
      return;
    }

    // --- üîì ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à (isAuthenticated ‡§Ö‡§¨ true ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§•‡§æ) ---
    console.log(
      "AuthRedirectGuard: User is logged in. Current role:",
      user?.role,
      "Approval Status:",
      user?.seller?.approvalStatus // ‚úÖ user.seller?.approvalStatus
    );

    // ‚úÖ ‡§Ø‡§¶‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•Ä 'auth-specific' ‡§™‡•á‡§ú ‡§™‡§∞ ‡§π‡•à (‡§ú‡•ã ‡§Ö‡§¨ ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§π‡•à)
    // ‡§§‡•ã ‡§â‡§∏‡•á ‡§∞‡•ã‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§
    if (currentPath === "/auth") { // ‡§ï‡•á‡§µ‡§≤ /auth ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
        const targetDashboard = ROLE_DASHBOARD_PATHS[user?.role || 'customer']; // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°
        if (currentPath !== targetDashboard) { // ‡§Ø‡§¶‡§ø ‡§µ‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§∏‡§π‡•Ä ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç
            console.log(`AuthRedirectGuard: Logged in user on auth page. Redirecting to ${targetDashboard}.`);
            navigate(targetDashboard, { replace: true });
            console.groupEnd();
            return;
        }
    }

    // --- ‡§∞‡•ã‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï ---
    let actualTargetPath: string | null = null;

    switch (user?.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus; // ‚úÖ user.seller?.approvalStatus
        if (approvalStatus === "approved") {
          actualTargetPath = SELLER_SPECIFIC_PATHS.dashboard;
        } else if (approvalStatus === "pending") {
          actualTargetPath = SELLER_SPECIFIC_PATHS.status;
        } else { // ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ 'seller' ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§Ö‡§®‡•Å‡§Æ‡•ã‡§¶‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Ø‡§æ ‡§Ö‡§ú‡•ç‡§û‡§æ‡§§
          actualTargetPath = SELLER_SPECIFIC_PATHS.apply;
        }

        // ‡§Ø‡§¶‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡§æ‡§• ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à (seller-dashboard, seller-status, seller-apply)
        // ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡§æ‡§• ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°/‡§∏‡•ç‡§ü‡•á‡§ü‡§∏/‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡•á ‡§Ö‡§≤‡§æ‡§µ‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        if (!currentPath.startsWith("/seller-") && actualTargetPath && currentPath !== actualTargetPath && !currentPath.startsWith(actualTargetPath + '/')) {
          console.log(`AuthRedirectGuard: Seller on non-seller path, redirecting to ${actualTargetPath}`);
          navigate(actualTargetPath, { replace: true });
          console.groupEnd();
          return;
        }
        break;
      }

      case "admin":
        actualTargetPath = ROLE_DASHBOARD_PATHS.admin;
        if (!currentPath.startsWith(actualTargetPath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(actualTargetPath, { replace: true });
          console.groupEnd();
          return;
        }
        break;

      case "delivery":
        actualTargetPath = ROLE_DASHBOARD_PATHS.delivery;
        if (!currentPath.startsWith(actualTargetPath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(actualTargetPath, { replace: true });
          console.groupEnd();
          return;
        }
        break;

      case "customer":
      default:
        // ‡§Ø‡§¶‡§ø ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§Ø‡§æ ‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§è‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§π‡•à
        if (
          currentPath.startsWith("/seller-") ||
          currentPath.startsWith("/admin-") ||
          currentPath.startsWith("/delivery-")
        ) {
          // ‚úÖ ‡§Ø‡§π ‡§µ‡§π ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡•á ‡§π‡§Æ ‡§π‡§≤ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
          // ‡§Ø‡§¶‡§ø ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï /seller-status ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§¨‡§®‡•á ‡§∞‡§π‡§®‡•á ‡§¶‡•á‡§Ç
          if (currentPath.startsWith(SELLER_SPECIFIC_PATHS.status)) {
            console.log("AuthRedirectGuard: Customer on /seller-status page. Allowing access.");
            console.groupEnd();
            return;
          }
          // ‡§Ö‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•É‡§∑‡•ç‡§†‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§â‡§∏‡•á ‡§π‡•ã‡§Æ ‡§™‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
          console.log("AuthRedirectGuard: Customer or unknown role on restricted non-status page, redirecting to /.");
          navigate("/", { replace: true });
          console.groupEnd();
          return;
        }
        break;
    }

    console.log("AuthRedirectGuard: Logged in user on appropriate path, staying put.");
    console.groupEnd();

  }, [user, isLoadingAuth, isAuthenticated, location.pathname, navigate, intent]);

  return null;
}
