// client/src/pages/seller/ordermanager.tsx

import React, { useEffect } from "react"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { Badge } from "@/components/ui/badge"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { Button } from "@/components/ui/button"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { Skeleton } from "@/components/ui/skeleton"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { useQueryClient, useMutation } from "@tanstack/react-query"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
import { OrderWithItems, Seller, OrderStatusEnum } from "shared/backend/schema"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
import { apiRequest } from "@/lib/queryClient"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { useToast } from "@/hooks/use-toast"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде
import { useSocket } from "@/providers/SocketProvider"; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг рдФрд░ рдЗрдореНрдкреЛрд░реНрдЯ рдкрд╛рде

// тЬЕ props рдЗрдВрдЯрд░рдлрд╝реЗрд╕
interface OrderManagerProps { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  orders: OrderWithItems[] | undefined; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  isLoading: boolean; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  error: Error | null; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  seller: Seller; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
}

// тЬЕ рдирдпрд╛ рдЗрдВрдЯрд░рдлрд╝реЗрд╕ рдЬреЛ deliveryboy рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░рддрд╛ рд╣реИ
interface OrderWithDeliveryBoy extends OrderWithItems { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  deliveryboy?: {
    id: number;
    name: string;
  };
}

const getStatusBadgeVariant = (status: string) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  switch (status) {
    case "pending":
      return "secondary";
    case "accepted":
      return "info";
    case "preparing":
      return "warning";
    case "ready_for_pickup":
      return "info";
    case "picked_up":
      return "info";
    case "out_for_delivery":
      return "warning";
    case "delivered":
      return "success";
    case "cancelled":
    case "rejected":
      return "destructive";
    default:
      return "secondary";
  }
};

const getStatusText = (status: string) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  switch (status) {
    case "pending":
      return "рд▓рдВрдмрд┐рдд";
    case "accepted":
      return "рд╕реНрд╡реАрдХреГрдд";
    case "preparing":
      return "рддреИрдпрд╛рд░ рд╣реЛ рд░рд╣рд╛ рд╣реИ";
    case "ready_for_pickup":
      return "рдкрд┐рдХрдЕрдк рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░";
    case "picked_up":
      return "рдкрд┐рдХрдЕрдк рдХрд┐рдпрд╛ рдЧрдпрд╛";
    case "out_for_delivery":
      return "рдбрд┐рд▓реАрд╡рд░реА рдХреЗ рд▓рд┐рдП рдирд┐рдХрд▓рд╛";
    case "delivered":
      return "рдбрд┐рд▓реАрд╡рд░ рдХрд┐рдпрд╛ рдЧрдпрд╛";
    case "cancelled":
      return "рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛";
    case "rejected":
      return "рдЕрд╕реНрд╡реАрдХреГрдд";
    default:
      return "рдЕрдЬреНрдЮрд╛рдд";
  }
};

export default function OrderManager({ // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  orders,
  isLoading,
  error,
  seller,
}: OrderManagerProps) { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  const queryClient = useQueryClient(); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  const { toast } = useToast(); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  
  // тЬЕ useSocket рд╕реЗ `socket` рдХреЛ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдбреА-рд╕реНрдЯреНрд░рдХреНрдЪрд░ рдХрд░реЗрдВ
  const { socket } = useSocket(); 

  // ---------------- socket.io listeners ----------------
  useEffect(() => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    if (!socket || !seller) return; // тЬЕ null-check

    const handleOrderUpdate = (updatedOrder: OrderWithItems) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      console.log("ЁЯУж Order status updated:", updatedOrder);

      // тЬЕ React Query cache рдХреЛ рд╕реАрдзреЗ рдЕрдкрдбреЗрдЯ рдХрд░реЛ
      queryClient.setQueryData<OrderWithItems[]>(["/api/sellers/orders"], (old) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        if (!old) return [updatedOrder];
        return old.map((o) => (o.id === updatedOrder.id ? updatedOrder : o));
      });

      toast({
        title: "Order Updated", // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        description: `Order #${updatedOrder.id} тЖТ ${getStatusText(updatedOrder.status)}`, // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      });
    };

    socket.on("order:status-updated", handleOrderUpdate); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг

    return () => {
      socket.off("order:status-updated", handleOrderUpdate); // тЬЕ cleanup рдореЗрдВ specific handler рдХреЛ рдкрд╛рд╕ рдХрд░реЗрдВ
    };
  }, [socket, seller, queryClient, toast]); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг

  // ---------------- mutation (status update) ----------------
  const { mutate, isPending } = useMutation({ // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    mutationFn: async ({ // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      orderId, // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      newStatus, // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    }: {
      orderId: number; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      newStatus: string; // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    }) => {
      // тЬЕ OrderStatusEnum рд╕реЗ enum values рдХреЛ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдПрдХреНрд╕реЗрд╕ рдХрд░реЗрдВ
      if (!(Object.values(OrderStatusEnum) as string[]).includes(newStatus)) {
        throw new Error("Invalid order status provided."); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `Error`
      }

      const response = await apiRequest( // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        "PATCH", // тЬЕ HTTP method рдХреЛ рдХреИрдкрд┐рдЯрд▓ рдореЗрдВ рд▓рд┐рдЦреЗрдВ
        `/api/sellers/orders/${orderId}/status`, // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        { newStatus } // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      );
      return response;
    },
    onSuccess: () => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      queryClient.invalidateQueries({ queryKey: ["/api/sellers/orders"] }); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      toast({
        title: "Order Status Updated", // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        description: "Order status has been updated successfully.",
      });
    },
    onError: (err: any) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      toast({
        title: "Error", // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
        description: err.message || "Failed to update order status.",
        variant: "destructive",
      });
    },
  });

  const handleStatusUpdate = (orderId: number, newStatus: string) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    mutate({ orderId, newStatus }); // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
  };

  // ---------------- render helpers ----------------
  const renderStatusActions = (order: OrderWithItems) => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    switch (order.status) {
      case "pending":
      case "placed":
        return (
          <>
            <Button // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
              variant="success"
              onClick={() => handleStatusUpdate(order.id, "accepted")} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
              disabled={isPending} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            >
              рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ
            </Button>
            <Button // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
              variant="destructive"
              onClick={() => handleStatusUpdate(order.id, "rejected")} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
              disabled={isPending} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            >
              рдЕрд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ
            </Button>
          </>
        );
      case "accepted":
        return (
          <Button // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            onClick={() => handleStatusUpdate(order.id, "preparing")} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            disabled={isPending} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
          >
            рддреИрдпрд╛рд░ рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ
          </Button>
        );
      case "preparing":
        return (
          <Button // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            onClick={() => handleStatusUpdate(order.id, "ready_for_pickup")} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
            disabled={isPending} // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
          >
            рдкрд┐рдХрдЕрдк рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░
          </Button>
        );
      default:
        return null;
    }
  };

  const renderContent = () => { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
    if (isLoading) { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      return (
        <div className="space-y-4"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
          {[...Array(3)].map((_, i) => ( {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `Array` */}
            <Skeleton key={i} className="h-24 w-full rounded-lg" /> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
          ))}
        </div>
      );
    }

    if (error) { // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
      return <p className="text-red-500">рдСрд░реНрдбрд░ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {error.message}</p>; {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
    }

    if (!orders || orders.length === 0) {
      return <p className="text-muted-foreground">рдЕрднреА рдХреЛрдИ рдСрд░реНрдбрд░ рдирд╣реАрдВ рд╣реИред</p>; {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
    }

    return (
      <div className="space-y-4"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
        {orders.map((order: OrderWithDeliveryBoy) => ( // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
          <div key={order.id} className="border rounded-lg p-4 mb-4"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
            <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-2"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              <h2 className="font-bold text-lg"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                рдСрд░реНрдбрд░ #{order.orderNumber || order.id} {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
              </h2>
              <div className="flex items-center space-x-2 mt-2 md:mt-0"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                <Badge variant={getStatusBadgeVariant(order.status as string)}> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
                  {getStatusText(order.status)} {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
                </Badge>
              </div>
            </div>
            
            {/* тЬЕ customer */}
            {order.customer && order.deliveryAddress && ( // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
              <p className="text-sm"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                рдЧреНрд░рд╛рд╣рдХ:{" "}
                <strong>
                  {order.customer.firstName || // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
                    order.deliveryAddress.fullName || // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг
                    "рдЕрдЬреНрдЮрд╛рдд"}
                </strong>
              </p>
            )}

            {/* тЬЕ delivery boy info */}
            {order.deliveryboy && (
              <p className="text-sm text-muted-foreground mt-1"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                рдбрд┐рд▓реАрд╡рд░реА рдмреЙрдп: <strong>{order.deliveryboy.name}</strong>
              </p>
            )}

            {/* тЬЕ payment info */}
            <p className="text-sm text-muted-foreground"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              рднреБрдЧрддрд╛рди: <strong>{order.paymentMethod || "рд▓рд╛рдЧреВ рдирд╣реАрдВ"}</strong> ( {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
              {order.paymentStatus || "рд▓рдВрдмрд┐рдд"}) {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
            </p>
            <p className="text-sm text-muted-foreground"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              рдХреБрд▓: <strong>тВ╣{Number(order.total ?? 0).toLocaleString()}</strong> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `Number` рдФрд░ `toLocaleString` */}
            </p>
            <p className="text-sm text-muted-foreground"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              рдСрд░реНрдбрд░ рдХрд┐рдпрд╛ рдЧрдпрд╛: {new Date(order.createdAt).toLocaleString()} {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `Date` рдФрд░ `createdAt` */}
            </p>

            {/* тЬЕ items */}
            <div className="mt-4 space-y-3"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              {order.items.map((item) => (
                <div key={item.id} className="flex items-center space-x-4"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                  <img
                    src={item.product?.image || "/placeholder.png"}
                    alt={item.product?.name || item.name || "product"}
                    className="w-12 h-12 object-cover rounded" // тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className`
                  />
                  <div>
                    <p className="font-semibold"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                      {item.product?.name || item.name || "рдЕрдирд╛рдо рдЙрддреНрдкрд╛рдж"}
                    </p>
                    <p className="text-sm text-gray-500"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
                      рдорд╛рддреНрд░рд╛: {item.quantity} ├Ч тВ╣
                      {Number(item.unitPrice ?? item.product?.price ?? 0).toLocaleString()} {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `Number` рдФрд░ `unitPrice` */}
                    </p>
                  </div>
                </div>
              ))}
            </div>

            {/* тЬЕ actions */}
            <div className="flex mt-6 space-x-2"> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ `className` */}
              {renderStatusActions(order)} {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
      <CardHeader> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
        <CardTitle>рдЖрдкрдХреЗ рдСрд░реНрдбрд░реНрд╕</CardTitle> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
      </CardHeader>
      <CardContent>{renderContent()}</CardContent> {/* тЬЕ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдирд╛рдордХрд░рдг */}
    </Card>
  );
}
