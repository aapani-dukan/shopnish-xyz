import { db } from "./db";
import { faker } from "@faker-js/faker";
import {
  users,
  sellersPgTable as sellers,
  categories,
  stores,
  products,
  deliveryBoys,
  orders,
  orderItems,
  cartItems,
  reviews,
  userRoleEnum,
  approvalStatusEnum,
} from "../shared/backend/schema";
import { eq } from "drizzle-orm";
import { v4 as uuidv4 } from 'uuid';

async function seedDatabase() {
  try {
    console.log("‚û°Ô∏è Starting database seed...");

    // 1Ô∏è‚É£ Clean existing data (order matters due to foreign keys)
    console.log("üóëÔ∏è Cleaning existing data...");
    await db.delete(reviews);
    await db.delete(orderItems);
    await db.delete(orders);
    await db.delete(cartItems);
    await db.delete(products);
    await db.delete(stores);
    await db.delete(sellers);
    await db.delete(deliveryBoys);
    await db.delete(users);
    await db.delete(categories);
    console.log("‚úÖ Existing data cleaned.");


    // 2Ô∏è‚É£ Insert Category
    console.log("‚ûï Inserting categories...");
    const seedCategories = [
      // ‡§ó‡•ç‡§∞‡•â‡§∏‡§∞‡•Ä ‡§î‡§∞ ‡§ñ‡§æ‡§®‡•á-‡§™‡•Ä‡§®‡•á ‡§ï‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç
      {
          name: "Vegetables",
          nameHindi: "‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç",
          slug: "vegetables",
          image: "https://placehold.co/400x300?text=‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç", 
          description: "‡§§‡§æ‡§ú‡•Ä ‡§î‡§∞ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç",
          isActive: true,
          sortOrder: 1,
      },
      {
          name: "Fruits",
          nameHindi: "‡§´‡§≤",
          slug: "fruits",
          image: "https://placehold.co/400x300?text=‡§´‡§≤", 
          description: "‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§´‡§≤",
          isActive: true,
          sortOrder: 2,
      },
      {
          name: "Dairy & Eggs",
          nameHindi: "‡§°‡•á‡§Ø‡§∞‡•Ä ‡§î‡§∞ ‡§Ö‡§Ç‡§°‡•á",
          slug: "dairy-eggs",
          image: "https://placehold.co/400x300?text=‡§°‡•á‡§Ø‡§∞‡•Ä", 
          description: "‡§¶‡•Ç‡§ß, ‡§¶‡§π‡•Ä, ‡§™‡§®‡•Ä‡§∞ ‡§î‡§∞ ‡§Ö‡§Ç‡§°‡•á",
          isActive: true,
          sortOrder: 3,
      },
      {
          name: "Snacks",
          nameHindi: "‡§∏‡•ç‡§®‡•à‡§ï‡•ç‡§∏",
          slug: "snacks",
          image: "https://placehold.co/400x300?text=‡§∏‡•ç‡§®‡•à‡§ï‡•ç‡§∏",
          description: "‡§Æ‡•Ä‡§†‡•á ‡§î‡§∞ ‡§®‡§Æ‡§ï‡•Ä‡§® ‡§∏‡•ç‡§®‡•à‡§ï‡•ç‡§∏ ‡§ï‡•Ä ‡§µ‡•à‡§∞‡§æ‡§á‡§ü‡•Ä",
          isActive: true,
          sortOrder: 4,
      },
      {
          name: "Beverages",
          nameHindi: "‡§™‡•á‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§•",
          slug: "beverages",
          image: "https://placehold.co/400x300?text=‡§™‡•á‡§Ø",
          description: "‡§ö‡§æ‡§Ø, ‡§ï‡•â‡§´‡•Ä, ‡§ú‡•Ç‡§∏ ‡§î‡§∞ ‡§ï‡•ã‡§≤‡•ç‡§° ‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡•ç‡§∏",
          isActive: true,
          sortOrder: 5,
      },

      // ‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡•â‡§®‡§ø‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§ó‡•à‡§ú‡•á‡§ü‡•ç‡§∏
      {
          name: "Mobile Phones",
          nameHindi: "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡•û‡•ã‡§®",
          slug: "mobile-phones",
          image: "https://placehold.co/400x300?text=‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤",
          description: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü‡§´‡•ã‡§®, ‡§¨‡•á‡§∏‡§ø‡§ï ‡§´‡•ã‡§® ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§∞‡•Ä‡§ú‡§º",
          isActive: true,
          sortOrder: 6,
      },
      {
          name: "Laptops & Computers",
          nameHindi: "‡§≤‡•à‡§™‡§ü‡•â‡§™ ‡§î‡§∞ ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞",
          slug: "laptops-computers",
          image: "https://placehold.co/400x300?text=‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞",
          description: "‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§≤‡•à‡§™‡§ü‡•â‡§™, ‡§°‡•á‡§∏‡•ç‡§ï‡§ü‡•â‡§™ ‡§î‡§∞ ‡§™‡•á‡§∞‡§ø‡§´‡•á‡§∞‡§≤‡•ç‡§∏",
          isActive: true,
          sortOrder: 7,
      },
      {
          name: "Home Appliances",
          nameHindi: "‡§ò‡§∞‡•á‡§≤‡•Ç ‡§â‡§™‡§ï‡§∞‡§£",
          slug: "home-appliances",
          image: "https://placehold.co/400x300?text=‡§â‡§™‡§ï‡§∞‡§£",
          description: "‡§ï‡§ø‡§ö‡§® ‡§î‡§∞ ‡§ò‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§ï‡§∞‡§£",
          isActive: true,
          sortOrder: 8,
      },

      // ‡§´‡§º‡•à‡§∂‡§® ‡§î‡§∞ ‡§ï‡§™‡§°‡§º‡•á
      {
          name: "Men's Fashion",
          nameHindi: "‡§™‡•Å‡§∞‡•Å‡§∑‡•ã‡§Ç ‡§ï‡§æ ‡§´‡•à‡§∂‡§®",
          slug: "mens-fashion",
          image: "https://placehold.co/400x300?text=‡§™‡•Å‡§∞‡•Å‡§∑",
          description: "‡§™‡•Å‡§∞‡•Å‡§∑‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§™‡§°‡§º‡•á, ‡§ú‡•Ç‡§§‡•á ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§∞‡•Ä‡§ú‡§º",
          isActive: true,
          sortOrder: 9,
      },
      {
          name: "Women's Fashion",
          nameHindi: "‡§Æ‡§π‡§ø‡§≤‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§´‡•à‡§∂‡§®",
          slug: "womens-fashion",
          image: "https://placehold.co/400x300?text=‡§Æ‡§π‡§ø‡§≤‡§æ",
          description: "‡§Æ‡§π‡§ø‡§≤‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§•‡§®‡§ø‡§ï ‡§î‡§∞ ‡§µ‡•á‡§∏‡•ç‡§ü‡§∞‡•ç‡§® ‡§µ‡§ø‡§Ø‡§∞",
          isActive: true,
          sortOrder: 10,
      },
      {
          name: "Kids' Fashion",
          nameHindi: "‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡§æ ‡§´‡•à‡§∂‡§®",
          slug: "kids-fashion",
          image: "https://placehold.co/400x300?text=‡§¨‡§ö‡•ç‡§ö‡•á",
          description: "‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§î‡§∞ ‡§ú‡•Ç‡§§‡•á",
          isActive: true,
          sortOrder: 11,
      },

      // ‡§ò‡§∞ ‡§î‡§∞ ‡§ï‡§ø‡§ö‡§®
      {
          name: "Home Decor",
          nameHindi: "‡§ò‡§∞ ‡§ï‡•Ä ‡§∏‡§ú‡§æ‡§µ‡§ü",
          slug: "home-decor",
          image: "https://placehold.co/400x300?text=‡§∏‡§ú‡§æ‡§µ‡§ü",
          description: "‡§¶‡•Ä‡§µ‡§æ‡§∞ ‡§ï‡•Ä ‡§∏‡§ú‡§æ‡§µ‡§ü, ‡§≤‡§æ‡§á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§∂‡•ã‡§™‡•Ä‡§∏",
          isActive: true,
          sortOrder: 12,
      },
      {
          name: "Furniture",
          nameHindi: "‡§´‡§∞‡•ç‡§®‡•Ä‡§ö‡§∞",
          slug: "furniture",
          image: "https://placehold.co/400x300?text=‡§´‡§∞‡•ç‡§®‡•Ä‡§ö‡§∞",
          description: "‡§ò‡§∞ ‡§î‡§∞ ‡§ë‡§´‡§ø‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§∞‡•ç‡§®‡•Ä‡§ö‡§∞",
          isActive: true,
          sortOrder: 13,
      },
      {
          name: "Cookware",
          nameHindi: "‡§ï‡§ø‡§ö‡§® ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§®",
          slug: "cookware",
          image: "https://placehold.co/400x300?text=‡§¨‡§∞‡•ç‡§§‡§®",
          description: "‡§ñ‡§æ‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§â‡§™‡§ï‡§∞‡§£",
          isActive: true,
          sortOrder: 14,
      },

      // ‡§∏‡•á‡§µ‡§æ‡§è‡§Å (Services)
      {
          name: "Home Services",
          nameHindi: "‡§ò‡§∞‡•á‡§≤‡•Ç ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          slug: "home-services",
          image: "https://placehold.co/400x300?text=‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          description: "‡§™‡•ç‡§≤‡§Ç‡§¨‡§ø‡§Ç‡§ó, ‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡§ø‡§∂‡§ø‡§Ø‡§® ‡§î‡§∞ ‡§∞‡§ø‡§™‡•á‡§Ø‡§∞ ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          isActive: true,
          sortOrder: 15,
      },
      {
          name: "Professional Services",
          nameHindi: "‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          slug: "professional-services",
          image: "https://placehold.co/400x300?text=‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§∂‡§®‡§≤",
          description: "‡§ü‡•ç‡§Ø‡•Ç‡§ü‡§∞‡§ø‡§Ç‡§ó, ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§î‡§∞ ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          isActive: true,
          sortOrder: 16,
      },
      {
          name: "Event Services",
          nameHindi: "‡§á‡§µ‡•á‡§Ç‡§ü ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
          slug: "event-services",
          image: "https://placehold.co/400x300?text=‡§á‡§µ‡•á‡§Ç‡§ü",
          description: "‡§ï‡•à‡§ü‡§∞‡•ç‡§∏, ‡§°‡•á‡§ï‡•ã‡§∞‡•á‡§ü‡§∞ ‡§î‡§∞ ‡§á‡§µ‡•á‡§Ç‡§ü ‡§™‡•ç‡§≤‡§æ‡§®‡§∞",
          isActive: true,
          sortOrder: 17,
      },

    ];

    // ‚úÖ ‡§ï‡•à‡§ü‡•á‡§ó‡§∞‡•Ä‡§ú‡§º ‡§ï‡•ã ‡§°‡§æ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§â‡§®‡§ï‡§æ ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const insertedCategories = await db.insert(categories).values(seedCategories).returning();
    console.log(`‚úÖ Inserted ${insertedCategories.length} categories.`);
    
    
    // 3Ô∏è‚É£ Insert Users
    console.log("‚ûï Inserting users...");
    const userInputs = [
      { firebaseUid: faker.string.uuid(), email: "admin@example.com", password: "password123", firstName: "Admin", lastName: "User", phone: "9876543210", role: userRoleEnum.enumValues[2] }, // "admin"
      { firebaseUid: faker.string.uuid(), email: "customer@example.com", password: "password123", firstName: "Customer", lastName: "User", phone: "9876543210", role: userRoleEnum.enumValues[0] }, // "customer"
      { firebaseUid: faker.string.uuid(), email: "seller@example.com", password: "password123", firstName: "Seller", lastName: "User", phone: "9876543210", role: userRoleEnum.enumValues[1] }, // "seller"
      { firebaseUid: faker.string.uuid(), email: "delivery@example.com", password: "password123", firstName: "Delivery", lastName: "User", phone: "9876543210", role: userRoleEnum.enumValues[3] }, // "delivery_boy"
    ];

    const insertedUsers = await db.insert(users).values(userInputs).returning();
    
    const sellerUser = insertedUsers.find(u => u.role === userRoleEnum.enumValues[1]);
    const customerUser = insertedUsers.find(u => u.role === userRoleEnum.enumValues[0]);
    const deliveryUser = insertedUsers.find(u => u.role === userRoleEnum.enumValues[3]);


    if (!sellerUser) throw new Error("‚ùå Seller user not found.");
    if (!customerUser) throw new Error("‚ùå Customer user not found.");
    if (!deliveryUser) throw new Error("‚ùå Delivery user not found.");
    console.log(`‚úÖ Inserted ${insertedUsers.length} users.`);


    // 4Ô∏è‚É£ Insert Seller
    console.log("‚ûï Inserting seller...");
    const [insertedSeller] = await db.insert(sellers).values({
      userId: sellerUser.id, // userId ‡§Ö‡§¨ users.id (integer) ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
      businessName: faker.company.name(),
      businessType: "grocery",
      businessAddress: faker.location.streetAddress(),
      city: "Indore",
      pincode: "452001",
      businessPhone: "9876543210",
      approvalStatus: approvalStatusEnum.enumValues[1], // "approved"
      gstNumber: "22AAAAA0000A1Z5",
      bankAccountNumber: "1234567890",
      ifscCode: "SBIN0000001",
    }).returning();
    if (!insertedSeller?.id) throw new Error("‚ùå Seller insert failed! No seller ID returned.");
    console.log("‚úÖ Seller inserted.");


    // 5Ô∏è‚É£ Insert Store for that Seller
    console.log("‚ûï Inserting store...");
    const [insertedStore] = await db.insert(stores).values({
      sellerId: insertedSeller.id,
      storeName: "My Grocery Store",
      storeType: "grocery",
      address: "123 Main Road",
      city: "Indore",
      pincode: "452001",
      phone: "9999999999",
      isActive: true,
      licenseNumber: "LIC123",
      gstNumber: "22BBBBB0000B1Z6",
    }).returning();

    if (!insertedStore?.id) {
      throw new Error("‚ùå Store insert failed! No store ID returned.");
    }
    console.log("‚úÖ Store inserted.");


    // 6Ô∏è‚É£ Insert Delivery Boy
    console.log("‚ûï Inserting delivery boy...");
    const deliveryBoyName = (deliveryUser.firstName || '') + ' ' + (deliveryUser.lastName || '');
    await db.insert(deliveryBoys).values({
      userId: deliveryUser.id, 
      email: deliveryUser.email!,
      name: deliveryBoyName.trim(),
      vehicleType: "bike",
      approvalStatus: approvalStatusEnum.enumValues[1], 
      firebaseUid: deliveryUser.firebaseUid, 
    });
    console.log("‚úÖ Delivery boy inserted.");
    // 7Ô∏è‚É£ Insert Products
    console.log("‚ûï Inserting products...");
    const insertedProducts = await db.insert(products).values(
      insertedCategories.map(cat => {
        const price = faker.commerce.price({ min: 10, max: 200, dec: 2 });
        const originalPrice = (parseFloat(price) * 1.2).toFixed(2);

        return {
          sellerId: insertedSeller.id,
          storeId: insertedStore.id,
          categoryId: cat.id,
          name: faker.commerce.productName(),
          nameHindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§®‡§æ‡§Æ",
          description: faker.commerce.productDescription(),
          descriptionHindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£",
          price: price.toString(),
          originalPrice: originalPrice.toString(),
          image: faker.image.url(),
          images: [faker.image.url(), faker.image.url()],
          unit: "kg",
          stock: 50,
          minOrderQty: 1,
          maxOrderQty: 5,
          isActive: true,
        };
      })
    ).returning();
    console.log(`‚úÖ Inserted ${insertedProducts.length} products.`);


    // 8Ô∏è‚É£ Insert Order
    console.log("‚ûï Inserting order...");
    const [order] = await db.insert(orders).values({
      customerId: customerUser.id,
      deliveryBoyId: null,
      orderNumber: "ORD-" + Date.now(),
      subtotal: "0.00",
      deliveryCharge: "0.00",
      discount: "0.00",
      total: "0.00",
      paymentMethod: "cod",
      paymentStatus: "paid",
      status: "placed",
      deliveryAddress: {
        address: "Customer Street",
        city: "Indore",
        pincode: "452001",
      },
    }).returning();
    if (!order?.id) throw new Error("‚ùå Order insert failed! No order ID returned.");
    console.log("‚úÖ Order inserted.");


    // 9Ô∏è‚É£ Order Items
    console.log("‚ûï Inserting order items...");
    let totalOrderValue = 0;
    const items = insertedProducts.slice(0, 2).map(p => {
      const qty = 2;
      const unitPrice = parseFloat(p.price || "0");
      const totalPrice = (unitPrice * qty).toFixed(2);
      totalOrderValue += parseFloat(totalPrice);

      return {
        orderId: order.id,
        productId: p.id,
        sellerId: insertedSeller.id,
        quantity: qty,
        unitPrice: unitPrice.toString(),
        totalPrice: totalPrice.toString(),
      };
    });
    await db.insert(orderItems).values(items);
    await db.update(orders).set({
      subtotal: totalOrderValue.toFixed(2).toString(),
      total: totalOrderValue.toFixed(2).toString()
    }).where(eq(orders.id, order.id));
    console.log(`‚úÖ Inserted ${items.length} order items and updated order total.`);


    // üîü Reviews
    console.log("‚ûï Inserting reviews...");
    if (insertedProducts.length > 0) {
      await db.insert(reviews).values([
        {
          customerId: customerUser.id,
          productId: insertedProducts[0].id,
          orderId: order.id,
          rating: 4,
          comment: "Nice product!",
        },
        {
          customerId: customerUser.id,
          productId: insertedProducts[0].id,
          orderId: order.id,
          rating: 5,
          comment: "Excellent quality!",
        }
      ]);
      console.log("‚úÖ Reviews inserted.");
    } else {
      console.log("‚ö†Ô∏è No products to review. Skipping review insertion.");
    }


    // üîÅ Cart Items
    console.log("‚ûï Inserting cart items...");
    await db.insert(cartItems).values(insertedProducts.slice(0, 2).map(p => ({
      userId: customerUser.id,
      productId: p.id,
      quantity: 1,
    })));
    console.log(`‚úÖ Inserted ${insertedProducts.slice(0, 2).length} cart items.`);

    console.log("üéâ Seed complete! Database is populated.");

  } catch (err: any) {
    console.error("‚ùå Seeding failed:", err.message || err);
    process.exit(1);
  }
}

seedDatabase();
