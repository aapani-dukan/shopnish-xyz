import { Request, Response } from 'express';
// ‚úÖ db ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§™‡§• (Path) ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
import { db } from '../db.ts';
import { orders, orderItems, deliveryAddresses } from '../../shared/backend/schema.ts';
import { eq, and, desc } from 'drizzle-orm';
import { AuthenticatedRequest } from '../middleware/authMiddleware.ts';
import { v4 as uuidv4 } from 'uuid';

/**
 * ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§™‡•ç‡§≤‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®‡•§
 * ‡§Ø‡§π ‡§Ö‡§¨ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•Ç‡§™ ‡§π‡•à‡•§
 */
export const placeOrder = async (req: AuthenticatedRequest, res: Response) => {
  console.log("üöÄ [API] Received request to place order.");
  console.log("üìã [API] Request Body:", req.body);

  try {
    const userId = req.user?.id;
    if (!userId) {
      console.log("‚ö†Ô∏è [API] Unauthorized: User ID missing.");
      return res.status(401).json({ message: "Unauthorized: User not logged in." });
    }

    const { deliveryAddress, paymentMethod, deliveryInstructions, items, subtotal, total, deliveryCharge } = req.body;

    if (!items || items.length === 0) {
      console.log("üõí [API] Items list is empty, cannot place an order.");
      return res.status(400).json({ message: "Items list is empty, cannot place an order." });
    }

    // ‚úÖ ‡§´‡§ø‡§ï‡•ç‡§∏: order_number ‡§ï‡•ã transaction ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
    const orderNumber = `ORD-${uuidv4()}`;

    const parsedSubtotal = parseFloat(subtotal);
    const parsedTotal = parseFloat(total);
    const parsedDeliveryCharge = parseFloat(deliveryCharge);

    let newOrderId;
    let newDeliveryAddressId;

    await db.transaction(async (tx) => {
      // ‚úÖ STEP 1: deliveryAddresses ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§Ø‡§æ ‡§™‡§§‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç‡•§
      const [newAddress] = await tx.insert(deliveryAddresses).values({
        userId: userId,
        fullName: deliveryAddress.fullName,
        phoneNumber: deliveryAddress.phone,
        addressLine1: deliveryAddress.address,
        addressLine2: deliveryAddress.landmark,
        city: deliveryAddress.city,
        postalCode: deliveryAddress.pincode,
        state: "Rajasthan",
      }).returning();
      
      newDeliveryAddressId = newAddress.id;

      // ‚úÖ STEP 2: orders ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç
      const [newOrder] = await tx.insert(orders).values({
        customerId: userId,
        status: "pending",
        orderNumber: orderNumber, // ‡§Ö‡§¨ ‡§Ø‡§π ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•à‡§ï‡•ç‡§∂‡§® ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§π‡•à
        subtotal: parsedSubtotal.toFixed(2),
        total: parsedTotal.toFixed(2),
        paymentMethod: paymentMethod || 'COD',
        deliveryAddressId: newDeliveryAddressId,
        deliveryInstructions: deliveryInstructions,
        deliveryCharge: parsedDeliveryCharge.toFixed(2),
      }).returning();
      
      newOrderId = newOrder.id;

      // ‚úÖ STEP 3: ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡•â‡§°‡•Ä ‡§∏‡•á ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è orderItems ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§°‡§æ‡§≤‡•á‡§Ç‡•§
      for (const item of items) {
        await tx.insert(orderItems).values({
          orderId: newOrder.id,
          productId: item.productId,
          sellerId: item.sellerId,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          totalPrice: item.totalPrice,
        });
      }
    });

    res.status(201).json({ message: "Order placed successfully!", orderId: newOrderId });

  } catch (error) {
    console.error("‚ùå Error placing order:", error);
    res.status(500).json({ message: "Failed to place order." });
  }
};


/**
 * ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§´‡§º‡•á‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® (‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à)‡•§
 */
export const getUserOrders = async (req: AuthenticatedRequest, res: Response) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized: User not logged in." });
    }

    const ordersWithItems = await db.query.orders.findMany({
      where: eq(orders.customerId, userId),
      with: {
        items: {
          with: {
            product: {
              with: {
                seller: true
              }
            }
          }
        }
      },
      orderBy: [desc(orders.createdAt)],
    });
    
    res.status(200).json(ordersWithItems);
  } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
      res.status(500).json({ message: "Failed to fetch orders." });
  }
};
