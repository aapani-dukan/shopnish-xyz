// server/middleware/authMiddleware.ts
import { Response, NextFunction } from 'express';
import { verifyToken, AuthenticatedRequest } from './verifyToken.ts';
import { userRoleEnum } from '../../shared/backend/schema.ts';
// db рдФрд░ deliveryBoys рд╕реНрдХреАрдорд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реИ рдХреНрдпреЛрдВрдХрд┐ verifyToken рдЙрдиреНрд╣реЗрдВ рдкрд╣рд▓реЗ рд╣реА рдлреЗрдЪ рдХрд░ рдЪреБрдХрд╛ рд╣реИ

// рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдХреЗ рд▓рд┐рдП рдорд┐рдбрд▓рд╡реЗрдпрд░ред
// рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдорд╛рдгрд┐рдд рд╣реИред
export const requireAuth = [
  verifyToken, // тЬЕ verifyToken рдЕрдм req.user рдореЗрдВ deliveryBoyId, role, approvalStatus рдЬреЛрдбрд╝ рд░рд╣рд╛ рд╣реИ
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: 'Unauthorized: Authentication required.' });
    }
    next();
  },
];

// рдХреЗрд╡рд▓ Admin рднреВрдорд┐рдХрд╛ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП
export const requireAdminAuth = [
  ...requireAuth, // тЬЕ рдкрд╣рд▓реЗ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЪрд▓рд╛рдПрдВ
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (req.user?.role !== userRoleEnum.enumValues[0]) { // 'admin'
      return res.status(403).json({ message: 'Forbidden: Admin access required.' });
    }
    next();
  },
];

// рдХреЗрд╡рд▓ Seller рднреВрдорд┐рдХрд╛ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП
export const requireSellerAuth = [
  ...requireAuth, // тЬЕ рдкрд╣рд▓реЗ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЪрд▓рд╛рдПрдВ
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (req.user?.role !== userRoleEnum.enumValues[1]) { // 'seller'
      return res.status(403).json({ message: 'Forbidden: Seller access required.' });
    }
    next();
  },
];

// рдХреЗрд╡рд▓ Delivery Boy рднреВрдорд┐рдХрд╛ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐
export const requireDeliveryBoyAuth = [
  ...requireAuth,
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    console.log("ЁЯФН [requireDeliveryBoyAuth] User in middleware:", req.user);

    if (
      !req.user ||
      req.user.role !== userRoleEnum.enumValues[2] || // 'delivery-boy'
      req.user.approvalStatus !== 'approved' || // тЬЕ approved рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП
      !req.user.deliveryBoyId // тЬЕ рд╕рд┐рд░реНрдл existence check рдХрд░реЗрдВ
    ) {
      return res.status(403).json({
        message: 'Forbidden: Access denied for unapproved or incomplete delivery boy profile.'
      });
    }

    // deliveryBoyId рдХреЛ number рдореЗрдВ normalize рдХрд░ рд▓реЗрдВ
    req.user.deliveryBoyId = Number(req.user.deliveryBoyId);

    next();
  },
];
