// server/middleware/authMiddleware.ts
import { Response, NextFunction } from "express";
import { verifyToken, AuthenticatedRequest } from "./verifyToken";
import { userRoleEnum, deliveryBoys, sellersPgTable, approvalStatusEnum } from "../../shared/backend/schema";
import { db } from "../db";
import { eq, and } from "drizzle-orm";

// ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£
export const requireAuth = [
  verifyToken,
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user || !req.user.id) {
      return res.status(401).json({
        message: "Unauthorized: Authentication required.",
      });
    }
    next();
  },
];

// ‡§ï‡•á‡§µ‡§≤ Admin ‡§ï‡•á ‡§≤‡§ø‡§è
export const requireAdminAuth = [
  ...requireAuth,
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (req.user.role !== userRoleEnum.enumValues[2]) {
      // ‚úÖ admin
      return res.status(403).json({
        message: "Forbidden: Admin access required.",
      });
    }
    next();
  },
];

// ‡§ï‡•á‡§µ‡§≤ Seller ‡§ï‡•á ‡§≤‡§ø‡§è
export const requireSellerAuth = [
  ...requireAuth,
  async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ async ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    if (req.user.role !== userRoleEnum.enumValues[1]) {
      // ‚úÖ seller
      return res.status(403).json({
        message: "Forbidden: Seller access required.",
      });
    }

    const userId = req.user.id;
    
    // 1. Postgres User ID ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á Seller ID ‡§î‡§∞ Approval Status ‡§ñ‡•ã‡§ú‡•á‡§Ç‡•§
    const sellerProfile = await db.query.sellersPgTable.findFirst({
        where: eq(sellersPgTable.userId, userId),
    });

    // 2. Seller ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§î‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§π‡•à ‡§á‡§∏‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç
    // ‡§Æ‡§æ‡§® ‡§≤‡•á‡§Ç ‡§ï‡§ø 'approved' ‡§Ü‡§™‡§ï‡•á approvalStatusEnum ‡§ï‡§æ ‡§¶‡•Ç‡§∏‡§∞‡§æ (index 1) ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§Ö‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§® ‡§π‡•à‡•§
    const approvedStatus = approvalStatusEnum.enumValues[1]; // ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è 'approved'
    
    if (!sellerProfile || sellerProfile.approvalStatus !== approvedStatus) {
         return res.status(403).json({ 
             message: "Seller authentication failed. Profile not found or not approved." 
         });
    }
    
    // 3. ‚úÖ sellerId ‡§ï‡•ã req.user ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    req.user.sellerId = sellerProfile.id; 
    
    next();
  },
];


// ‡§ï‡•á‡§µ‡§≤ Delivery Boy ‡§ï‡•á ‡§≤‡§ø‡§è

// ‚úÖ ‡§ï‡•á‡§µ‡§≤ Delivery Boy ‡§ï‡•á ‡§≤‡§ø‡§è (‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§)
export const requireDeliveryBoyAuth = [
  ...requireAuth,
  async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    console.log("üîç [requireDeliveryBoyAuth] User:", req.user);

    if (!req.user || req.user.role !== userRoleEnum.enumValues[3]) {
      // ‚úÖ delivery-boy
      return res.status(403).json({ message: "Forbidden: Not a delivery boy." });
    }

    // ‚ùå ‡§Ø‡§π ‡§≤‡§æ‡§á‡§® ‡§ó‡§≤‡§§ ‡§•‡•Ä: req.user.sellerId = sellerProfile.id;
    // ‡§á‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç, ‡§Ø‡§π Delivery Boy middleware ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è

    // DB ‡§∏‡•á deliveryBoy record fetch ‡§ï‡§∞‡•á‡§Ç
    const deliveryBoy = await db.query.deliveryBoys.findFirst({
      where: and(
        eq(deliveryBoys.userId, req.user.id),
        eq(deliveryBoys.approvalStatus, "approved")
      ),
    });

    if (!deliveryBoy) {
      return res.status(403).json({
        message: "Forbidden: Delivery boy not approved or not found.",
      });
    }

    // req.user ‡§Æ‡•á‡§Ç deliveryBoyId attach ‡§ï‡§∞‡•á‡§Ç
    req.user.deliveryBoyId = deliveryBoy.id;

    next();
  },
];
