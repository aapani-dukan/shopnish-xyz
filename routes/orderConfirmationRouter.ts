// server/routes/orderConfirmationRouter.ts

import { Router } from 'express';
import { db } from '../server/db.ts';
import { orders, orderItems, products, users } from '../shared/backend/schema.ts';
import { eq } from 'drizzle-orm';
import { AuthenticatedRequest, requireAuth } from '../server/middleware/authMiddleware.ts';

const router = Router();

// ‚úÖ GET /api/order-confirmation/:orderId
// ‡§Ø‡§π ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü ‡§è‡§ï ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§î‡§∞ ‡§â‡§∏‡§ï‡•á ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•ã ‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§
router.get('/:orderId', requireAuth, async (req: AuthenticatedRequest, res) => {
  try {
    console.log(`üîç [API] Received GET request for order ID: ${req.params.orderId}`);
    const firebaseUid = req.user?.firebaseUid;
    const { orderId } = req.params;

    if (!firebaseUid) {
      return res.status(401).json({ message: "Unauthorized: Missing user UUID." });
    }

    if (!orderId || isNaN(parseInt(orderId))) {
      return res.status(400).json({ message: "Invalid order ID provided." });
    }

    // ‚úÖ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç
    const user = await db.query.users.findFirst({
        where: eq(users.firebaseUid, firebaseUid),
    });

    if (!user) {
        return res.status(404).json({ message: "User not found." });
    }

    // ‚úÖ Drizzle ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§â‡§∏‡§ï‡•á ID ‡§î‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ID ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ñ‡•ã‡§ú‡•á‡§Ç
    const order = await db.query.orders.findFirst({
      where: eq(orders.id, parseInt(orderId)),
      with: {
        items: {
          with: {
            product: true,
          },
        },
      },
    });

    if (!order || order.customerId !== user.id) {
      console.log(`‚ùå [API] Order not found for ID: ${orderId} or does not belong to user.`);
      return res.status(404).json({ message: "Order not found." });
    }

    console.log(`‚úÖ [API] Sending order details for ID: ${order.id}`);
    res.status(200).json(order);

  } catch (error) {
    console.error("‚ùå [API] Error fetching order confirmation details:", error);
    res.status(500).json({ message: "Failed to fetch order details. An unexpected error occurred." });
  }
});

export default router;
