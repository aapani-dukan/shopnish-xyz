//routes/cartRoutes.ts

import { Router, Response } from 'express';
import { db } from '../db.ts';
import {
  users,
  cartItemsPgTable,
  products
} from '../../shared/backend/schema.ts';
import { eq } from 'drizzle-orm';
import { AuthenticatedRequest, requireUserAuth } from '../middleware/authMiddleware.ts';

const cartRouter = Router();

// ‚úÖ GET /api/cart - Get user's cart
cartRouter.get('/', requireUserAuth, async (req: AuthenticatedRequest, res: Response) => {
  try {
    console.log("üõí [API] Received GET request for cart.");
    const firebaseUid = req.user?.firebaseUid;
    if (!firebaseUid) {
      console.log("‚ùå [API] Unauthorized: Missing user UUID.");
      return res.status(401).json({ error: 'Unauthorized: Missing user UUID' });
    }

    // 1. Authenticated user ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§Ø‡•Ç‡§ú‡§∞ ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const [dbUser] = await db
      .select({ id: users.id })
      .from(users)
      .where(eq(users.firebaseUid, firebaseUid));

    if (!dbUser) {
      console.log("‚ùå [API] User not found for UUID:", firebaseUid);
      return res.status(404).json({ error: 'User not found.' });
    }

    // 2. Drizzle ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏ ‡§ï‡•ã ‡§â‡§®‡§ï‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const cartItems = await db.query.cartItemsPgTable.findMany({
      where: eq(cartItemsPgTable.userId, dbUser.id),
      with: {
        product: true, // `products` ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
      },
    });

    // 3. ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã JSON ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç
    console.log(`‚úÖ [API] Sending cart with ${cartItems.length} items.`);
    return res.status(200).json(cartItems);

  } catch (error) {
    console.error('‚ùå [API] Error fetching cart:', error);
    // ‡§á‡§∏ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§Ç ‡§î‡§∞ ‡§è‡§ï ‡§∏‡§æ‡§´ JSON ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
    return res.status(500).json({ error: 'Failed to fetch cart. An unexpected error occurred.' });
  }
});

// ‚úÖ POST /api/cart/add - Add item to cart
cartRouter.post('/add', requireUserAuth, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const firebaseUid = req.user?.firebaseUid;
    const { productId, quantity } = req.body;
    
    if (!firebaseUid || !productId || !quantity) {
      return res.status(400).json({ error: 'Missing required fields.' });
    }

    const [dbUser] = await db
      .select({ id: users.id })
      .from(users)
      .where(eq(users.firebaseUid, firebaseUid));

    if (!dbUser) {
      return res.status(404).json({ error: 'User not found.' });
    }

    const [existingItem] = await db
      .select()
      .from(cartItemsPgTable)
      .where(eq(cartItemsPgTable.userId, dbUser.id));

    if (existingItem) {
      const updatedItem = await db
        .update(cartItemsPgTable)
        .set({
          quantity: existingItem.quantity + quantity,
        })
        .where(eq(cartItemsPgTable.id, existingItem.id))
        .returning();
      return res.status(200).json({ message: 'Cart item quantity updated.', item: updatedItem[0] });
    } else {
      const newItem = await db
        .insert(cartItemsPgTable)
        .values({
          userId: dbUser.id,
          productId: productId,
          quantity: quantity,
        })
        .returning();
      return res.status(201).json({ message: 'Item added to cart.', item: newItem[0] });
    }
  } catch (error) {
    console.error('‚ùå [API] Error adding item to cart:', error);
    return res.status(500).json({ error: 'Failed to add item to cart.' });
  }
});

export default cartRouter;
